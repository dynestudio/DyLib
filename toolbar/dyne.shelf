<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="dyne" label="Dyne">
    <memberTool name="add null"/>
    <memberTool name="add transform"/>
    <memberTool name="dy Pscale Multiplier"/>
    <memberTool name="dy Pscale Remap"/>
    <memberTool name="attribwrangle1"/>
    <memberTool name="dy RS Point Instance"/>
    <memberTool name="dy RS Point Random Instances"/>
    <memberTool name="dy RS Light Instances Attrs"/>
    <memberTool name="redshift::TextureSampler_nodes_script"/>
    <memberTool name="dy Object Merge"/>
    <memberTool name="shader_out"/>
  </toolshelf>

  <tool name="add null" label="add null" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[selection = hou.selectedNodes()

if len(selection) != 0:
    selected = selection[0]
    parent = selected.parent().path() + '/'
    selNodeName = selected.name()
    selNodePos = selected.position()  
    
    node = hou.node('/%s' %parent).createNode('null')
    
### Setting node position ###
    node.setPosition(hou.Vector2(selNodePos[0], selNodePos[1]-1))
    node.setInput(0, selected)
    selected.setSelected(False)
    node.setSelected(True)
    
### Setting render and display flags for respective contexts ###
    try:
        node.setDisplayFlag(True)
        node.setRenderFlag(True)
    except:
        node.setDisplayFlag(True)]]></script>
  </tool>

  <tool name="attribwrangle1" label="dy V Multiplier" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Dyne/Wrangler Presets</toolSubmenu>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribwrangle'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_v_multiplier (Sop/attribwrangle)
set _obj_geo1_v_multiplier = `run("opadd -e -n -v attribwrangle v_multiplier")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_v_multiplier
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector uvselect "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }         parm {             name    "vex_precision"             baseparm             label   "VEX Precision"             export  none         }     }      parm {         name    "Multiplier"         label   "Multiplier"         type    float         default { "0" }         range   { 0 1 }     } ' $_obj_geo1_v_multiplier
opparm $_obj_geo1_v_multiplier  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_geo1_v_multiplier snippet ( '@v *= chf("Multiplier");' ) Multiplier ( 1 )
opcolor -c 1 0.52899998426437378 0.62400001287460327 $_obj_geo1_v_multiplier
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_v_multiplier
opexprlanguage -s hscript $_obj_geo1_v_multiplier
opuserdata -n '___Version___' -v '' $_obj_geo1_v_multiplier
opset -p on $_obj_geo1_v_multiplier

opcf $arg1
opwire -n $_obj_geo1_pointwrangle1 -0 $_obj_geo1_v_multiplier

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_v_multiplier
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_v_multiplier
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="redshift::TextureSampler_nodes_script" label="dy RS PBR Base" icon="opdef:/Vop/rs_ogl_material?IconSVG">
    <toolMenuContext name="network">
      <contextOpType>redshift::Vop/TextureSampler</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Dyne</toolSubmenu>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('redshift::BumpMap'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_mat_redshift_vopnet1_Albedo (redshift::Vop/TextureSampler)
set _mat_redshift_vopnet1_Albedo = `run("opadd -e -n -v redshift::TextureSampler Albedo")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_mat_redshift_vopnet1_Albedo
opspareds '    group {         name    "RS_shaderNodeMainSwitcher4"         label   "General"          groupsimple {             name    "Image_1"             label   "Image"             grouptag { "group_type" "simple" }              parm {                 name    "tex0"                 baseparm                 label   "Filename"                 export  none             }             parm {                 name    "tex0_layername"                 baseparm                 label   "Layer Name"                 export  none             }             groupsimple {                 name    "Gamma_Override_2"                 label   "Gamma Override"                 grouptag { "group_type" "simple" }                  parm {                     name    "tex0_gammaoverride"                     baseparm                     label   "Enable"                     export  none                 }                 parm {                     name    "tex0_srgb"                     baseparm                     label   "sRGB"                     export  none                 }                 parm {                     name    "tex0_gamma"                     baseparm                     label   "Gamma"                     export  none                 }             }          }          groupsimple {             name    "UV_3"             label   "UV"             grouptag { "group_type" "simple" }              parm {                 name    "tspace_id"                 baseparm                 label   "UV Channel"                 export  none             }             parm {                 name    "mirrorU"                 baseparm                 label   "Mirror U"                 export  none             }             parm {                 name    "mirrorV"                 baseparm                 label   "Mirror V"                 export  none             }             parm {                 name    "wrapU"                 baseparm                 label   "Wrap U"                 export  none             }             parm {                 name    "wrapV"                 baseparm                 label   "Wrap V"                 export  none             }             groupsimple {                 name    "Remap_4"                 label   "Remap"                 grouptag { "group_type" "simple" }                  parm {                     name    "scale"                     baseparm                     label   "Scale"                     export  none                 }                 parm {                     name    "offset"                     baseparm                     label   "Offset"                     export  none                 }                 parm {                     name    "rotate"                     baseparm                     label   "Rotate"                     export  none                 }             }          }      }      group {         name    "RS_shaderNodeMainSwitcher4_1"         label   "Adjust"          parm {             name    "color_multiplier"             baseparm             label   "Color Multiplier"             export  none         }         parm {             name    "color_offset"             baseparm             label   "Color Offset"             export  none         }         parm {             name    "alpha_multiplier"             baseparm             label   "Alpha Multiplier"             export  none         }         parm {             name    "alpha_offset"             baseparm             label   "Alpha Offset"             export  none         }         parm {             name    "alpha_is_luminance"             baseparm             label   "Alpha Is Luminance"             export  none         }         parm {             name    "invalid_color"             baseparm             label   "Default/Invalid Color"             export  none         }     }      group {         name    "RS_shaderNodeMainSwitcher4_2"         label   "Advanced"          parm {             name    "filter_enable_type"             baseparm             label   "Filter Enable"             export  none         }         parm {             name    "filter_bicubic"             baseparm             label   "Bicubic Filtering"             export  none         }         parm {             name    "prefer_sharp"             baseparm             label   "Prefer Sharp Filtering"             export  none         }         parm {             name    "mip_bias"             baseparm             label   "Mip Bias"             export  none         }     }      group {         name    "RS_shaderNodeMainSwitcher4_3"         label   "ProACES"         invisibletab          parm {             name    "proaces_orig"             label   "Original"             type    string             default { "" }         }         parm {             name    "proaces_auto"             label   "Auto Manage"             type    toggle             default { "1" }         }     }  ' $_mat_redshift_vopnet1_Albedo
opparm -V 18.0.532 $_mat_redshift_vopnet1_Albedo proaces_orig ( 'Y:/My Drive/Dyne - LLL/Dyne_LLL_2020/Houly 20 - Carlos Dordelly/03_Assets/15_Textures/rock_cliffs_tkegdgjfw/tkegdgjfw_4K_Albedo.jpg' ) proaces_auto ( off )
opcolor -c 1 0.97600001096725464 0.66600000858306885 $_mat_redshift_vopnet1_Albedo
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off -Y on -L off -M off -H on -E off $_mat_redshift_vopnet1_Albedo
opexprlanguage -s hscript $_mat_redshift_vopnet1_Albedo
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_Albedo
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_Albedo
opuserdata -n '__inputgroup_Adjust' -v 'collapsed' $_mat_redshift_vopnet1_Albedo
opuserdata -n '__inputgroup_Advanced' -v 'collapsed' $_mat_redshift_vopnet1_Albedo
opuserdata -n '__inputgroup_General' -v 'collapsed' $_mat_redshift_vopnet1_Albedo
opset -p on $_mat_redshift_vopnet1_Albedo
opcf $arg1

# Node $_mat_redshift_vopnet1_Displacement (redshift::Vop/TextureSampler)
set _mat_redshift_vopnet1_Displacement = `run("opadd -e -n -v redshift::TextureSampler Displacement")`
oplocate -x `$arg2 + 0` -y `$arg3 + -24.70008` $_mat_redshift_vopnet1_Displacement
chblockbegin
chadd -t 0 0 $_mat_redshift_vopnet1_Displacement scale1
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/scale1")' $_mat_redshift_vopnet1_Displacement/scale1
chadd -t 0 0 $_mat_redshift_vopnet1_Displacement scale2
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/scale2")' $_mat_redshift_vopnet1_Displacement/scale2
chadd -t 0 0 $_mat_redshift_vopnet1_Displacement offset1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/offset1")' $_mat_redshift_vopnet1_Displacement/offset1
chadd -t 0 0 $_mat_redshift_vopnet1_Displacement offset2
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/offset2")' $_mat_redshift_vopnet1_Displacement/offset2
chadd -t 0 0 $_mat_redshift_vopnet1_Displacement rotate
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/rotate")' $_mat_redshift_vopnet1_Displacement/rotate
chblockend
opparm -V 18.0.532 $_mat_redshift_vopnet1_Displacement tex0_gammaoverride ( on ) scale ( scale1 scale2 ) offset ( offset1 offset2 ) rotate ( rotate )
opcolor -c 1 0.97600001096725464 0.66600000858306885 $_mat_redshift_vopnet1_Displacement
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_Displacement
opexprlanguage -s hscript $_mat_redshift_vopnet1_Displacement
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_Displacement
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_Displacement
opuserdata -n '__inputgroup_Adjust' -v 'collapsed' $_mat_redshift_vopnet1_Displacement
opuserdata -n '__inputgroup_Advanced' -v 'collapsed' $_mat_redshift_vopnet1_Displacement
opuserdata -n '__inputgroup_General' -v 'collapsed' $_mat_redshift_vopnet1_Displacement
opset -p on $_mat_redshift_vopnet1_Displacement
opcf $arg1

# Node $_mat_redshift_vopnet1_white_offset (redshift::Vop/RSMathAdd)
set _mat_redshift_vopnet1_white_offset = `run("opadd -e -n -v redshift::RSMathAdd white_offset")`
oplocate -x `$arg2 + 6.6433` -y `$arg3 + -3.8179600000000002` $_mat_redshift_vopnet1_white_offset
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_white_offset
opexprlanguage -s hscript $_mat_redshift_vopnet1_white_offset
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_white_offset
opset -p on $_mat_redshift_vopnet1_white_offset
opcf $arg1

# Node $_mat_redshift_vopnet1_TriPlanar2 (redshift::Vop/TriPlanar)
set _mat_redshift_vopnet1_TriPlanar2 = `run("opadd -e -n -v redshift::TriPlanar TriPlanar2")`
oplocate -x `$arg2 + 4.4577999999999989` -y `$arg3 + -3.8179600000000002` $_mat_redshift_vopnet1_TriPlanar2
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_TriPlanar2
opexprlanguage -s hscript $_mat_redshift_vopnet1_TriPlanar2
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_TriPlanar2
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar2
opuserdata -n '__inputgroup_Coordinates' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar2
opuserdata -n '__inputgroup_Texture' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar2
opset -p on $_mat_redshift_vopnet1_TriPlanar2
opcf $arg1

# Node $_mat_redshift_vopnet1_Specular (redshift::Vop/TextureSampler)
set _mat_redshift_vopnet1_Specular = `run("opadd -e -n -v redshift::TextureSampler Specular")`
oplocate -x `$arg2 + 0` -y `$arg3 + -8.6166900000000002` $_mat_redshift_vopnet1_Specular
chblockbegin
chadd -t 0 0 $_mat_redshift_vopnet1_Specular scale1
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/scale1")' $_mat_redshift_vopnet1_Specular/scale1
chadd -t 0 0 $_mat_redshift_vopnet1_Specular scale2
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/scale2")' $_mat_redshift_vopnet1_Specular/scale2
chadd -t 0 0 $_mat_redshift_vopnet1_Specular offset1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/offset1")' $_mat_redshift_vopnet1_Specular/offset1
chadd -t 0 0 $_mat_redshift_vopnet1_Specular offset2
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/offset2")' $_mat_redshift_vopnet1_Specular/offset2
chadd -t 0 0 $_mat_redshift_vopnet1_Specular rotate
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/rotate")' $_mat_redshift_vopnet1_Specular/rotate
chblockend
opparm -V 18.0.532 $_mat_redshift_vopnet1_Specular tex0_gammaoverride ( on ) scale ( scale1 scale2 ) offset ( offset1 offset2 ) rotate ( rotate )
opcolor -c 1 0.97600001096725464 0.66600000858306885 $_mat_redshift_vopnet1_Specular
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_Specular
opexprlanguage -s hscript $_mat_redshift_vopnet1_Specular
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_Specular
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_Specular
opuserdata -n '__inputgroup_Adjust' -v 'collapsed' $_mat_redshift_vopnet1_Specular
opuserdata -n '__inputgroup_Advanced' -v 'collapsed' $_mat_redshift_vopnet1_Specular
opuserdata -n '__inputgroup_General' -v 'collapsed' $_mat_redshift_vopnet1_Specular
opset -p on $_mat_redshift_vopnet1_Specular
opcf $arg1

# Node $_mat_redshift_vopnet1_TriPlanar6 (redshift::Vop/TriPlanar)
set _mat_redshift_vopnet1_TriPlanar6 = `run("opadd -e -n -v redshift::TriPlanar TriPlanar6")`
oplocate -x `$arg2 + 4.4577999999999989` -y `$arg3 + -18.008780000000002` $_mat_redshift_vopnet1_TriPlanar6
opcolor -c 0.45100000500679016 0.36899998784065247 0.79600000381469727 $_mat_redshift_vopnet1_TriPlanar6
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_TriPlanar6
opexprlanguage -s hscript $_mat_redshift_vopnet1_TriPlanar6
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_TriPlanar6
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar6
opuserdata -n '__inputgroup_Coordinates' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar6
opuserdata -n '__inputgroup_Texture' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar6
opset -p on $_mat_redshift_vopnet1_TriPlanar6
opcf $arg1

# Node $_mat_redshift_vopnet1_Material1 (redshift::Vop/Material)
set _mat_redshift_vopnet1_Material1 = `run("opadd -e -n -v redshift::Material Material1")`
oplocate -x `$arg2 + 20.608180000000001` -y `$arg3 + -5.8586860000000005` $_mat_redshift_vopnet1_Material1
opparm -V 18.0.532 $_mat_redshift_vopnet1_Material1 diffuse_weight ( 0.80000000000000004 ) refl_brdf ( 1 ) refl_ior ( 1.5600000000000001 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_Material1
opexprlanguage -s hscript $_mat_redshift_vopnet1_Material1
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_Material1
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_Material1
opuserdata -n '__inputgroup_Advanced' -v 'collapsed' $_mat_redshift_vopnet1_Material1
opuserdata -n '__inputgroup_Coating' -v 'collapsed' $_mat_redshift_vopnet1_Material1
opuserdata -n '__inputgroup_Optimizations' -v 'collapsed' $_mat_redshift_vopnet1_Material1
opuserdata -n '__inputgroup_Sub-Surface Multiple Scattering' -v 'collapsed' $_mat_redshift_vopnet1_Material1
opset -p on $_mat_redshift_vopnet1_Material1
opcf $arg1

# Node $_mat_redshift_vopnet1_RoundCorners1 (redshift::Vop/RoundCorners)
set _mat_redshift_vopnet1_RoundCorners1 = `run("opadd -e -n -v redshift::RoundCorners RoundCorners1")`
oplocate -x `$arg2 + 9.2330999999999985` -y `$arg3 + -14.2788` $_mat_redshift_vopnet1_RoundCorners1
opparm -V 18.0.532 $_mat_redshift_vopnet1_RoundCorners1 radius ( 0.001 ) numSamples ( 12 )
opcolor -c 0.45100000500679016 0.36899998784065247 0.79600000381469727 $_mat_redshift_vopnet1_RoundCorners1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_RoundCorners1
opexprlanguage -s hscript $_mat_redshift_vopnet1_RoundCorners1
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_RoundCorners1
opset -p on $_mat_redshift_vopnet1_RoundCorners1
opcf $arg1

# Node $_mat_redshift_vopnet1_Cavity (redshift::Vop/TextureSampler)
set _mat_redshift_vopnet1_Cavity = `run("opadd -e -n -v redshift::TextureSampler Cavity")`
oplocate -x `$arg2 + 0` -y `$arg3 + -5.3479650000000003` $_mat_redshift_vopnet1_Cavity
chblockbegin
chadd -t 0 0 $_mat_redshift_vopnet1_Cavity scale1
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/scale1")' $_mat_redshift_vopnet1_Cavity/scale1
chadd -t 0 0 $_mat_redshift_vopnet1_Cavity scale2
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/scale2")' $_mat_redshift_vopnet1_Cavity/scale2
chadd -t 0 0 $_mat_redshift_vopnet1_Cavity offset1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/offset1")' $_mat_redshift_vopnet1_Cavity/offset1
chadd -t 0 0 $_mat_redshift_vopnet1_Cavity offset2
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/offset2")' $_mat_redshift_vopnet1_Cavity/offset2
chadd -t 0 0 $_mat_redshift_vopnet1_Cavity rotate
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/rotate")' $_mat_redshift_vopnet1_Cavity/rotate
chblockend
opparm -V 18.0.532 $_mat_redshift_vopnet1_Cavity tex0_gammaoverride ( on ) scale ( scale1 scale2 ) offset ( offset1 offset2 ) rotate ( rotate )
opcolor -c 1 0.97600001096725464 0.66600000858306885 $_mat_redshift_vopnet1_Cavity
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_Cavity
opexprlanguage -s hscript $_mat_redshift_vopnet1_Cavity
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_Cavity
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_Cavity
opuserdata -n '__inputgroup_Adjust' -v 'collapsed' $_mat_redshift_vopnet1_Cavity
opuserdata -n '__inputgroup_Advanced' -v 'collapsed' $_mat_redshift_vopnet1_Cavity
opuserdata -n '__inputgroup_General' -v 'collapsed' $_mat_redshift_vopnet1_Cavity
opset -p on $_mat_redshift_vopnet1_Cavity
opcf $arg1

# Node $_mat_redshift_vopnet1_albedo_mult_AO (redshift::Vop/RSMathMulVector)
set _mat_redshift_vopnet1_albedo_mult_AO = `run("opadd -e -n -v redshift::RSMathMulVector albedo_mult_AO")`
oplocate -x `$arg2 + 9.2330999999999985` -y `$arg3 + -1.4710400000000003` $_mat_redshift_vopnet1_albedo_mult_AO
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_albedo_mult_AO
opexprlanguage -s hscript $_mat_redshift_vopnet1_albedo_mult_AO
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_albedo_mult_AO
opset -p on $_mat_redshift_vopnet1_albedo_mult_AO
opcf $arg1

# Node $_mat_redshift_vopnet1_TriPlanar8 (redshift::Vop/TriPlanar)
set _mat_redshift_vopnet1_TriPlanar8 = `run("opadd -e -n -v redshift::TriPlanar TriPlanar8")`
oplocate -x `$arg2 + 4.4577999999999989` -y `$arg3 + -8.6166900000000002` $_mat_redshift_vopnet1_TriPlanar8
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_TriPlanar8
opexprlanguage -s hscript $_mat_redshift_vopnet1_TriPlanar8
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_TriPlanar8
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar8
opuserdata -n '__inputgroup_Coordinates' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar8
opuserdata -n '__inputgroup_Texture' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar8
opset -p on $_mat_redshift_vopnet1_TriPlanar8
opcf $arg1

# Node $_mat_redshift_vopnet1_TriPlanar5 (redshift::Vop/TriPlanar)
set _mat_redshift_vopnet1_TriPlanar5 = `run("opadd -e -n -v redshift::TriPlanar TriPlanar5")`
oplocate -x `$arg2 + 4.4577999999999989` -y `$arg3 + -15.91968` $_mat_redshift_vopnet1_TriPlanar5
opcolor -c 0.45100000500679016 0.36899998784065247 0.79600000381469727 $_mat_redshift_vopnet1_TriPlanar5
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_TriPlanar5
opexprlanguage -s hscript $_mat_redshift_vopnet1_TriPlanar5
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_TriPlanar5
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar5
opuserdata -n '__inputgroup_Coordinates' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar5
opuserdata -n '__inputgroup_Texture' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar5
opset -p on $_mat_redshift_vopnet1_TriPlanar5
opcf $arg1

# Node $_mat_redshift_vopnet1_BumpMap1 (redshift::Vop/BumpMap)
set _mat_redshift_vopnet1_BumpMap1 = `run("opadd -e -n -v redshift::BumpMap BumpMap1")`
oplocate -x `$arg2 + 9.2330999999999985` -y `$arg3 + -15.91968` $_mat_redshift_vopnet1_BumpMap1
opparm -V 18.0.532 $_mat_redshift_vopnet1_BumpMap1 scale ( 0.074999999999999997 )
opcolor -c 0.45100000500679016 0.36899998784065247 0.79600000381469727 $_mat_redshift_vopnet1_BumpMap1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_BumpMap1
opexprlanguage -s hscript $_mat_redshift_vopnet1_BumpMap1
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_BumpMap1
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_BumpMap1
opuserdata -n '__inputgroup_Remap' -v 'collapsed' $_mat_redshift_vopnet1_BumpMap1
opuserdata -n '__inputgroup_Texture' -v 'collapsed' $_mat_redshift_vopnet1_BumpMap1
opset -p on $_mat_redshift_vopnet1_BumpMap1
opcf $arg1

# Node $_mat_redshift_vopnet1_Bump (redshift::Vop/TextureSampler)
set _mat_redshift_vopnet1_Bump = `run("opadd -e -n -v redshift::TextureSampler Bump")`
oplocate -x `$arg2 + 0` -y `$arg3 + -15.91968` $_mat_redshift_vopnet1_Bump
chblockbegin
chadd -t 0 0 $_mat_redshift_vopnet1_Bump scale1
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/scale1")' $_mat_redshift_vopnet1_Bump/scale1
chadd -t 0 0 $_mat_redshift_vopnet1_Bump scale2
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/scale2")' $_mat_redshift_vopnet1_Bump/scale2
chadd -t 0 0 $_mat_redshift_vopnet1_Bump offset1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/offset1")' $_mat_redshift_vopnet1_Bump/offset1
chadd -t 0 0 $_mat_redshift_vopnet1_Bump offset2
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/offset2")' $_mat_redshift_vopnet1_Bump/offset2
chadd -t 0 0 $_mat_redshift_vopnet1_Bump rotate
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/rotate")' $_mat_redshift_vopnet1_Bump/rotate
chblockend
opparm -V 18.0.532 $_mat_redshift_vopnet1_Bump tex0_gammaoverride ( on ) scale ( scale1 scale2 ) offset ( offset1 offset2 ) rotate ( rotate )
opcolor -c 1 0.97600001096725464 0.66600000858306885 $_mat_redshift_vopnet1_Bump
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_Bump
opexprlanguage -s hscript $_mat_redshift_vopnet1_Bump
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_Bump
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_Bump
opuserdata -n '__inputgroup_Adjust' -v 'collapsed' $_mat_redshift_vopnet1_Bump
opuserdata -n '__inputgroup_Advanced' -v 'collapsed' $_mat_redshift_vopnet1_Bump
opuserdata -n '__inputgroup_General' -v 'collapsed' $_mat_redshift_vopnet1_Bump
opset -p on $_mat_redshift_vopnet1_Bump
opcf $arg1

# Node $_mat_redshift_vopnet1_rough_remap (redshift::Vop/RSRamp)
set _mat_redshift_vopnet1_rough_remap = `run("opadd -e -n -v redshift::RSRamp rough_remap")`
oplocate -x `$arg2 + 9.2330999999999985` -y `$arg3 + -10.618580000000001` $_mat_redshift_vopnet1_rough_remap
opparm $_mat_redshift_vopnet1_rough_remap  ramp ( 2 )
opparm -V 18.0.532 $_mat_redshift_vopnet1_rough_remap ramp1pos ( 0.3977055549621582 ) ramp1c ( 0.02 0.02 0.02 ) ramp2pos ( 1 ) ramp2c ( 0.75999999046325684 0.75999999046325684 0.75999999046325684 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_rough_remap
opexprlanguage -s hscript $_mat_redshift_vopnet1_rough_remap
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_rough_remap
opset -p on $_mat_redshift_vopnet1_rough_remap
opcf $arg1

# Node $_mat_redshift_vopnet1_Roughness (redshift::Vop/TextureSampler)
set _mat_redshift_vopnet1_Roughness = `run("opadd -e -n -v redshift::TextureSampler Roughness")`
oplocate -x `$arg2 + 0` -y `$arg3 + -10.618580000000001` $_mat_redshift_vopnet1_Roughness
chblockbegin
chadd -t 0 0 $_mat_redshift_vopnet1_Roughness scale1
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/scale1")' $_mat_redshift_vopnet1_Roughness/scale1
chadd -t 0 0 $_mat_redshift_vopnet1_Roughness scale2
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/scale2")' $_mat_redshift_vopnet1_Roughness/scale2
chadd -t 0 0 $_mat_redshift_vopnet1_Roughness offset1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/offset1")' $_mat_redshift_vopnet1_Roughness/offset1
chadd -t 0 0 $_mat_redshift_vopnet1_Roughness offset2
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/offset2")' $_mat_redshift_vopnet1_Roughness/offset2
chadd -t 0 0 $_mat_redshift_vopnet1_Roughness rotate
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/rotate")' $_mat_redshift_vopnet1_Roughness/rotate
chblockend
opparm -V 18.0.532 $_mat_redshift_vopnet1_Roughness tex0_gammaoverride ( on ) scale ( scale1 scale2 ) offset ( offset1 offset2 ) rotate ( rotate )
opcolor -c 1 0.97600001096725464 0.66600000858306885 $_mat_redshift_vopnet1_Roughness
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_Roughness
opexprlanguage -s hscript $_mat_redshift_vopnet1_Roughness
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_Roughness
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_Roughness
opuserdata -n '__inputgroup_Adjust' -v 'collapsed' $_mat_redshift_vopnet1_Roughness
opuserdata -n '__inputgroup_Advanced' -v 'collapsed' $_mat_redshift_vopnet1_Roughness
opuserdata -n '__inputgroup_General' -v 'collapsed' $_mat_redshift_vopnet1_Roughness
opset -p on $_mat_redshift_vopnet1_Roughness
opcf $arg1

# Node $_mat_redshift_vopnet1_RSColorCorrection (redshift::Vop/RSColorCorrection)
set _mat_redshift_vopnet1_RSColorCorrection = `run("opadd -e -n -v redshift::RSColorCorrection RSColorCorrection")`
oplocate -x `$arg2 + 13.832439999999998` -y `$arg3 + -3.8179600000000002` $_mat_redshift_vopnet1_RSColorCorrection
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_RSColorCorrection
opexprlanguage -s hscript $_mat_redshift_vopnet1_RSColorCorrection
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_RSColorCorrection
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_RSColorCorrection
opset -p on $_mat_redshift_vopnet1_RSColorCorrection
opcf $arg1

# Node $_mat_redshift_vopnet1_TriPlanar4 (redshift::Vop/TriPlanar)
set _mat_redshift_vopnet1_TriPlanar4 = `run("opadd -e -n -v redshift::TriPlanar TriPlanar4")`
oplocate -x `$arg2 + 4.4577999999999989` -y `$arg3 + -10.618580000000001` $_mat_redshift_vopnet1_TriPlanar4
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_TriPlanar4
opexprlanguage -s hscript $_mat_redshift_vopnet1_TriPlanar4
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_TriPlanar4
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar4
opuserdata -n '__inputgroup_Coordinates' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar4
opuserdata -n '__inputgroup_Texture' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar4
opset -p on $_mat_redshift_vopnet1_TriPlanar4
opcf $arg1

# Node $_mat_redshift_vopnet1_BumpBlender1 (redshift::Vop/BumpBlender)
set _mat_redshift_vopnet1_BumpBlender1 = `run("opadd -e -n -v redshift::BumpBlender BumpBlender1")`
oplocate -x `$arg2 + 13.832439999999998` -y `$arg3 + -14.2788` $_mat_redshift_vopnet1_BumpBlender1
opparm -V 18.0.532 $_mat_redshift_vopnet1_BumpBlender1 additive ( on ) bumpWeight0 ( 1 ) bumpWeight1 ( 1 )
opcolor -c 0.45100000500679016 0.36899998784065247 0.79600000381469727 $_mat_redshift_vopnet1_BumpBlender1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_BumpBlender1
opexprlanguage -s hscript $_mat_redshift_vopnet1_BumpBlender1
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_BumpBlender1
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_BumpBlender1
opuserdata -n '__inputgroup_Base' -v 'collapsed' $_mat_redshift_vopnet1_BumpBlender1
opuserdata -n '__inputgroup_Layer 0' -v 'collapsed' $_mat_redshift_vopnet1_BumpBlender1
opuserdata -n '__inputgroup_Layer 1' -v 'collapsed' $_mat_redshift_vopnet1_BumpBlender1
opuserdata -n '__inputgroup_Layer 2' -v 'collapsed' $_mat_redshift_vopnet1_BumpBlender1
opset -p on $_mat_redshift_vopnet1_BumpBlender1
opcf $arg1

# Node $_mat_redshift_vopnet1_AO (redshift::Vop/TextureSampler)
set _mat_redshift_vopnet1_AO = `run("opadd -e -n -v redshift::TextureSampler AO")`
oplocate -x `$arg2 + 0` -y `$arg3 + -3.8179600000000002` $_mat_redshift_vopnet1_AO
chblockbegin
chadd -t 0 0 $_mat_redshift_vopnet1_AO scale1
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/scale1")' $_mat_redshift_vopnet1_AO/scale1
chadd -t 0 0 $_mat_redshift_vopnet1_AO scale2
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/scale2")' $_mat_redshift_vopnet1_AO/scale2
chadd -t 0 0 $_mat_redshift_vopnet1_AO offset1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/offset1")' $_mat_redshift_vopnet1_AO/offset1
chadd -t 0 0 $_mat_redshift_vopnet1_AO offset2
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/offset2")' $_mat_redshift_vopnet1_AO/offset2
chadd -t 0 0 $_mat_redshift_vopnet1_AO rotate
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/rotate")' $_mat_redshift_vopnet1_AO/rotate
chblockend
opparm -V 18.0.532 $_mat_redshift_vopnet1_AO tex0_gammaoverride ( on ) scale ( scale1 scale2 ) offset ( offset1 offset2 ) rotate ( rotate )
opcolor -c 1 0.97600001096725464 0.66600000858306885 $_mat_redshift_vopnet1_AO
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_AO
opexprlanguage -s hscript $_mat_redshift_vopnet1_AO
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_AO
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_AO
opuserdata -n '__inputgroup_Adjust' -v 'collapsed' $_mat_redshift_vopnet1_AO
opuserdata -n '__inputgroup_Advanced' -v 'collapsed' $_mat_redshift_vopnet1_AO
opuserdata -n '__inputgroup_General' -v 'collapsed' $_mat_redshift_vopnet1_AO
opset -p on $_mat_redshift_vopnet1_AO
opcf $arg1

# Node $_mat_redshift_vopnet1_Displacement1 (redshift::Vop/Displacement)
set _mat_redshift_vopnet1_Displacement1 = `run("opadd -e -n -v redshift::Displacement Displacement1")`
oplocate -x `$arg2 + 9.2330999999999985` -y `$arg3 + -24.70008` $_mat_redshift_vopnet1_Displacement1
opparm -V 18.0.532 $_mat_redshift_vopnet1_Displacement1 scale ( 0.10000000000000001 )
opcolor -c 0.45100000500679016 0.36899998784065247 0.79600000381469727 $_mat_redshift_vopnet1_Displacement1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_Displacement1
opexprlanguage -s hscript $_mat_redshift_vopnet1_Displacement1
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_Displacement1
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_Displacement1
opuserdata -n '__inputgroup_Change Range' -v 'collapsed' $_mat_redshift_vopnet1_Displacement1
opuserdata -n '__inputgroup_Tangents' -v 'collapsed' $_mat_redshift_vopnet1_Displacement1
opuserdata -n '__inputgroup_Texture' -v 'collapsed' $_mat_redshift_vopnet1_Displacement1
opset -p on $_mat_redshift_vopnet1_Displacement1
opcf $arg1

# Node $_mat_redshift_vopnet1_Normal (redshift::Vop/TextureSampler)
set _mat_redshift_vopnet1_Normal = `run("opadd -e -n -v redshift::TextureSampler Normal")`
oplocate -x `$arg2 + 0` -y `$arg3 + -18.008780000000002` $_mat_redshift_vopnet1_Normal
chblockbegin
chadd -t 0 0 $_mat_redshift_vopnet1_Normal scale1
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/scale1")' $_mat_redshift_vopnet1_Normal/scale1
chadd -t 0 0 $_mat_redshift_vopnet1_Normal scale2
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/scale2")' $_mat_redshift_vopnet1_Normal/scale2
chadd -t 0 0 $_mat_redshift_vopnet1_Normal offset1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/offset1")' $_mat_redshift_vopnet1_Normal/offset1
chadd -t 0 0 $_mat_redshift_vopnet1_Normal offset2
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/offset2")' $_mat_redshift_vopnet1_Normal/offset2
chadd -t 0 0 $_mat_redshift_vopnet1_Normal rotate
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("../Albedo/rotate")' $_mat_redshift_vopnet1_Normal/rotate
chblockend
opparm -V 18.0.532 $_mat_redshift_vopnet1_Normal tex0_gammaoverride ( on ) scale ( scale1 scale2 ) offset ( offset1 offset2 ) rotate ( rotate )
opcolor -c 1 0.97600001096725464 0.66600000858306885 $_mat_redshift_vopnet1_Normal
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_Normal
opexprlanguage -s hscript $_mat_redshift_vopnet1_Normal
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_Normal
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_Normal
opuserdata -n '__inputgroup_Adjust' -v 'collapsed' $_mat_redshift_vopnet1_Normal
opuserdata -n '__inputgroup_Advanced' -v 'collapsed' $_mat_redshift_vopnet1_Normal
opuserdata -n '__inputgroup_General' -v 'collapsed' $_mat_redshift_vopnet1_Normal
opset -p on $_mat_redshift_vopnet1_Normal
opcf $arg1

# Node $_mat_redshift_vopnet1_WireFrame (redshift::Vop/WireFrame)
set _mat_redshift_vopnet1_WireFrame = `run("opadd -e -n -v redshift::WireFrame WireFrame")`
oplocate -x `$arg2 + 20.608180000000001` -y `$arg3 + -14.42517` $_mat_redshift_vopnet1_WireFrame
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_WireFrame
opexprlanguage -s hscript $_mat_redshift_vopnet1_WireFrame
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_WireFrame
opset -p on $_mat_redshift_vopnet1_WireFrame
opcf $arg1

# Node $_mat_redshift_vopnet1_TriPlanar3 (redshift::Vop/TriPlanar)
set _mat_redshift_vopnet1_TriPlanar3 = `run("opadd -e -n -v redshift::TriPlanar TriPlanar3")`
oplocate -x `$arg2 + 4.4577999999999989` -y `$arg3 + -5.3479650000000003` $_mat_redshift_vopnet1_TriPlanar3
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_TriPlanar3
opexprlanguage -s hscript $_mat_redshift_vopnet1_TriPlanar3
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_TriPlanar3
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar3
opuserdata -n '__inputgroup_Coordinates' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar3
opuserdata -n '__inputgroup_Texture' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar3
opset -p on $_mat_redshift_vopnet1_TriPlanar3
opcf $arg1

# Node $_mat_redshift_vopnet1_spec_remap (redshift::Vop/RSRamp)
set _mat_redshift_vopnet1_spec_remap = `run("opadd -e -n -v redshift::RSRamp spec_remap")`
oplocate -x `$arg2 + 9.2330999999999985` -y `$arg3 + -8.6166900000000002` $_mat_redshift_vopnet1_spec_remap
opparm $_mat_redshift_vopnet1_spec_remap  ramp ( 2 )
opparm -V 18.0.532 $_mat_redshift_vopnet1_spec_remap ramp1pos ( 0.3977055549621582 ) ramp1c ( 0.02 0.02 0.02 ) ramp2pos ( 1 ) ramp2c ( 0.75999999046325684 0.75999999046325684 0.75999999046325684 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_spec_remap
opexprlanguage -s hscript $_mat_redshift_vopnet1_spec_remap
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_spec_remap
opset -p on $_mat_redshift_vopnet1_spec_remap
opcf $arg1

# Node $_mat_redshift_vopnet1_TriPlanar7 (redshift::Vop/TriPlanar)
set _mat_redshift_vopnet1_TriPlanar7 = `run("opadd -e -n -v redshift::TriPlanar TriPlanar7")`
oplocate -x `$arg2 + 4.5425000000000004` -y `$arg3 + -24.735880000000002` $_mat_redshift_vopnet1_TriPlanar7
opcolor -c 0.45100000500679016 0.36899998784065247 0.79600000381469727 $_mat_redshift_vopnet1_TriPlanar7
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_TriPlanar7
opexprlanguage -s hscript $_mat_redshift_vopnet1_TriPlanar7
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_TriPlanar7
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar7
opuserdata -n '__inputgroup_Coordinates' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar7
opuserdata -n '__inputgroup_Texture' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar7
opset -p on $_mat_redshift_vopnet1_TriPlanar7
opcf $arg1

# Node $_mat_redshift_vopnet1_TriPlanar1 (redshift::Vop/TriPlanar)
set _mat_redshift_vopnet1_TriPlanar1 = `run("opadd -e -n -v redshift::TriPlanar TriPlanar1")`
oplocate -x `$arg2 + 4.4577999999999989` -y `$arg3 + 0` $_mat_redshift_vopnet1_TriPlanar1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_TriPlanar1
opexprlanguage -s hscript $_mat_redshift_vopnet1_TriPlanar1
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_TriPlanar1
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar1
opuserdata -n '__inputgroup_Coordinates' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar1
opuserdata -n '__inputgroup_Texture' -v 'collapsed' $_mat_redshift_vopnet1_TriPlanar1
opset -p on $_mat_redshift_vopnet1_TriPlanar1
opcf $arg1

# Node $_mat_redshift_vopnet1_BumpMap2 (redshift::Vop/BumpMap)
set _mat_redshift_vopnet1_BumpMap2 = `run("opadd -e -n -v redshift::BumpMap BumpMap2")`
oplocate -x `$arg2 + 9.2330999999999985` -y `$arg3 + -18.008780000000002` $_mat_redshift_vopnet1_BumpMap2
opparm -V 18.0.532 $_mat_redshift_vopnet1_BumpMap2 inputType ( 1 )
opcolor -c 0.45100000500679016 0.36899998784065247 0.79600000381469727 $_mat_redshift_vopnet1_BumpMap2
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off -L off -M off -H on -E off $_mat_redshift_vopnet1_BumpMap2
opexprlanguage -s hscript $_mat_redshift_vopnet1_BumpMap2
opuserdata -n '___Version___' -v '18.0.532' $_mat_redshift_vopnet1_BumpMap2
opuserdata -n '__inputgroup_' -v 'collapsed' $_mat_redshift_vopnet1_BumpMap2
opuserdata -n '__inputgroup_Remap' -v 'collapsed' $_mat_redshift_vopnet1_BumpMap2
opuserdata -n '__inputgroup_Texture' -v 'collapsed' $_mat_redshift_vopnet1_BumpMap2
opset -p on $_mat_redshift_vopnet1_BumpMap2

opcf $arg1
opcf $arg1
opcf $arg1
opwire -n $_mat_redshift_vopnet1_TriPlanar2 -0 $_mat_redshift_vopnet1_white_offset
opcf $arg1
opwire -n $_mat_redshift_vopnet1_AO -0 $_mat_redshift_vopnet1_TriPlanar2
opcf $arg1
opcf $arg1
opwire -n $_mat_redshift_vopnet1_Normal -0 $_mat_redshift_vopnet1_TriPlanar6
opcf $arg1
opwire -n $_mat_redshift_vopnet1_RSColorCorrection -0 $_mat_redshift_vopnet1_Material1
opwire -n $_mat_redshift_vopnet1_spec_remap -6 $_mat_redshift_vopnet1_Material1
opwire -n $_mat_redshift_vopnet1_rough_remap -7 $_mat_redshift_vopnet1_Material1
opwire -n $_mat_redshift_vopnet1_BumpBlender1 -49 $_mat_redshift_vopnet1_Material1
opcf $arg1
opcf $arg1
opcf $arg1
opwire -n $_mat_redshift_vopnet1_TriPlanar1 -0 $_mat_redshift_vopnet1_albedo_mult_AO
opwire -n $_mat_redshift_vopnet1_white_offset -1 $_mat_redshift_vopnet1_albedo_mult_AO
opcf $arg1
opwire -n $_mat_redshift_vopnet1_Specular -0 $_mat_redshift_vopnet1_TriPlanar8
opcf $arg1
opwire -n $_mat_redshift_vopnet1_Bump -0 $_mat_redshift_vopnet1_TriPlanar5
opcf $arg1
opwire -n $_mat_redshift_vopnet1_TriPlanar5 -0 $_mat_redshift_vopnet1_BumpMap1
opcf $arg1
opcf $arg1
opwire -n $_mat_redshift_vopnet1_TriPlanar4 -0 $_mat_redshift_vopnet1_rough_remap
opcf $arg1
opcf $arg1
opwire -n $_mat_redshift_vopnet1_albedo_mult_AO -0 $_mat_redshift_vopnet1_RSColorCorrection
opcf $arg1
opwire -n $_mat_redshift_vopnet1_Roughness -0 $_mat_redshift_vopnet1_TriPlanar4
opcf $arg1
opwire -n $_mat_redshift_vopnet1_RoundCorners1 -0 $_mat_redshift_vopnet1_BumpBlender1
opwire -n $_mat_redshift_vopnet1_BumpMap1 -1 $_mat_redshift_vopnet1_BumpBlender1
opwire -n $_mat_redshift_vopnet1_BumpMap2 -3 $_mat_redshift_vopnet1_BumpBlender1
opcf $arg1
opcf $arg1
opwire -n $_mat_redshift_vopnet1_TriPlanar7 -0 $_mat_redshift_vopnet1_Displacement1
opcf $arg1
opcf $arg1
opcf $arg1
opwire -n $_mat_redshift_vopnet1_Cavity -0 $_mat_redshift_vopnet1_TriPlanar3
opcf $arg1
opwire -n $_mat_redshift_vopnet1_TriPlanar8 -0 $_mat_redshift_vopnet1_spec_remap
opcf $arg1
opwire -n $_mat_redshift_vopnet1_Displacement -0 $_mat_redshift_vopnet1_TriPlanar7
opcf $arg1
opwire -n $_mat_redshift_vopnet1_Albedo -0 $_mat_redshift_vopnet1_TriPlanar1
opcf $arg1
opwire -n $_mat_redshift_vopnet1_TriPlanar6 -0 $_mat_redshift_vopnet1_BumpMap2

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_mat_redshift_vopnet1_Material1
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_mat_redshift_vopnet1_Albedo
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="add transform" label="Add Transform" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[selection = hou.selectedNodes()

if len(selection) != 0:
    selected = selection[0]
    parent = selected.parent().path() + '/'
    selNodeName = selected.name()
    selNodePos = selected.position()  
    
    node = hou.node('/%s' %parent).createNode('xform')
    
### Setting node position ###
    node.setPosition(hou.Vector2(selNodePos[0], selNodePos[1]-1))
    node.setInput(0, selected)
    selected.setSelected(False)
    node.setSelected(True)
    
### Setting render and display flags for respective contexts ###
    try:
        node.setDisplayFlag(True)
        node.setRenderFlag(True)
    except:
        node.setDisplayFlag(True)]]></script>
  </tool>

  <tool name="dy Pscale Multiplier" label="dy Pscale Multiplier" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Dyne/Wrangler Presets</toolSubmenu>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribwrangle'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_pscale_multiplier (Sop/attribwrangle)
set _obj_geo1_pscale_multiplier = `run("opadd -e -n -v attribwrangle pscale_multiplier")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_pscale_multiplier
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector uvselect "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }         parm {             name    "vex_precision"             baseparm             label   "VEX Precision"             export  none         }     }      parm {         name    "Multiplier"         label   "Multiplier"         type    float         default { "0" }         range   { 0 1 }     } ' $_obj_geo1_pscale_multiplier
opparm $_obj_geo1_pscale_multiplier  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_geo1_pscale_multiplier snippet ( '@pscale *= chf("Multiplier");' ) Multiplier ( 1 )
opcolor -c 1 0.52899998426437378 0.62400001287460327 $_obj_geo1_pscale_multiplier
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_pscale_multiplier
opexprlanguage -s hscript $_obj_geo1_pscale_multiplier
opuserdata -n '___Version___' -v '' $_obj_geo1_pscale_multiplier
opset -p on $_obj_geo1_pscale_multiplier

opcf $arg1
opwire -n $_obj_geo1_pointwrangle1 -0 $_obj_geo1_pscale_multiplier

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_pscale_multiplier
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_pscale_multiplier
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="dy RS Point Random Instances" label="dy RS Point Random Instances" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Dyne/Redshift Utils</toolSubmenu>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribwrangle'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_rs_point_random_instances (Sop/attribwrangle)
set _obj_geo1_rs_point_random_instances = `run("opadd -e -n -v attribwrangle rs_point_random_instances")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_rs_point_random_instances
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector uvselect "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }         parm {             name    "vex_precision"             baseparm             label   "VEX Precision"             export  none         }     }      parm {         name    "instances_path"         label   "Instances Path"         type    oppath         default { "" }         parmtag { "oprelative" "." }         parmtag { "script_callback_language" "python" }     }     parm {         name    "instance_note"         label   "Note"         type    label         default { "path without instance number." }     }     parm {         name    "instances_amount"         label   "Instances Amount"         type    integer         default { "0" }         range   { 0 10 }     }     parm {         name    "Seed"         label   "Seed"         type    float         default { "0" }         range   { 0 1 }     } ' $_obj_geo1_rs_point_random_instances
opparm $_obj_geo1_rs_point_random_instances  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_geo1_rs_point_random_instances snippet ( 'int rnum = ceil(rand(@ptnum + chf("Seed")) * chi("instances_amount"));\n\ns@instance = ch("instances_path") + itoa(rnum);' )
opcolor -c 1 0.52899998426437378 0.62400001287460327 $_obj_geo1_rs_point_random_instances
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_rs_point_random_instances
opexprlanguage -s hscript $_obj_geo1_rs_point_random_instances
opuserdata -n '___Version___' -v '' $_obj_geo1_rs_point_random_instances
opset -p on $_obj_geo1_rs_point_random_instances

opcf $arg1
opwire -n $_obj_geo1_pointwrangle1 -0 $_obj_geo1_rs_point_random_instances

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_rs_point_random_instances
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_rs_point_random_instances
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="dy RS Point Instance" label="dy RS Point Instance" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Dyne/Redshift Utils</toolSubmenu>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribwrangle'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_rs_point_instance (Sop/attribwrangle)
set _obj_geo1_rs_point_instance = `run("opadd -e -n -v attribwrangle rs_point_instance")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_rs_point_instance
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector uvselect "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }         parm {             name    "vex_precision"             baseparm             label   "VEX Precision"             export  none         }     }      parm {         name    "instance_path"         label   "Instance Path"         type    oppath         default { "" }         parmtag { "oprelative" "." }         parmtag { "script_callback_language" "python" }     } ' $_obj_geo1_rs_point_instance
opparm $_obj_geo1_rs_point_instance  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_geo1_rs_point_instance snippet ( 's@instance = ch("instance_path");' )
opcolor -c 1 0.52899998426437378 0.62400001287460327 $_obj_geo1_rs_point_instance
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_rs_point_instance
opexprlanguage -s hscript $_obj_geo1_rs_point_instance
opuserdata -n '___Version___' -v '' $_obj_geo1_rs_point_instance
opset -p on $_obj_geo1_rs_point_instance

opcf $arg1
opwire -n $_obj_geo1_pointwrangle1 -0 $_obj_geo1_rs_point_instance

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_rs_point_instance
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_rs_point_instance
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="dy Pscale Remap" label="dy Pscale Remap" icon="SOP_attribwrangle">
    <helpURL>operator:Sop/attribwrangle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribwrangle</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Dyne/Wrangler Presets</toolSubmenu>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('attribwrangle'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_pscale_remap (Sop/attribwrangle)
set _obj_geo1_pscale_remap = `run("opadd -e -n -v attribwrangle pscale_remap")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_pscale_remap
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector uvselect "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }         parm {             name    "vex_precision"             baseparm             label   "VEX Precision"             export  none         }     }      parm {         name    "Remap"         label   "Remap"         type    ramp_flt         default { "2" }         range   { 1! 10 }     } ' $_obj_geo1_pscale_remap
opparm $_obj_geo1_pscale_remap  bindings ( 0 ) groupbindings ( 0 ) Remap ( 2 )
opparm $_obj_geo1_pscale_remap snippet ( '@pscale = chramp("Remap", @pscale);' ) Remap2pos ( 1 ) Remap2value ( 1 )
opcolor -c 1 0.52899998426437378 0.62400001287460327 $_obj_geo1_pscale_remap
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_pscale_remap
opexprlanguage -s hscript $_obj_geo1_pscale_remap
opuserdata -n '___Version___' -v '' $_obj_geo1_pscale_remap
opset -p on $_obj_geo1_pscale_remap

opcf $arg1
opwire -n $_obj_geo1_pointwrangle1 -0 $_obj_geo1_pscale_remap

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_pscale_remap
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_pscale_remap
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="dy RS Light Instances Attrs" label="dy RS Light Instances Attrs" icon="SOP_attribwrangle">
    <toolMenuContext name="network">
      <contextOpType>Sop/object_merge</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Dyne/Redshift Utils</toolSubmenu>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if "outputnodename" in kwargs and "inputindex" in kwargs:
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if "inputnodename" in kwargs and "outputindex" in kwargs:
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if "autoplace" in kwargs:
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if "shiftclick" in kwargs and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if "nodepositionx" in kwargs and             "nodepositiony" in kwargs:
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if "node_bbox" in kwargs:
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if 'attribdelete' not in child_type:
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_get_points (Sop/object_merge)
set _obj_geo1_get_points = `run("opadd -e -n -v object_merge get_points")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_get_points
opparm $_obj_geo1_get_points  numobj ( 1 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_get_points
opexprlanguage -s hscript $_obj_geo1_get_points
opuserdata -n '___Version___' -v '18.5.351' $_obj_geo1_get_points
opset -p on $_obj_geo1_get_points
opcf $arg1

# Node $_obj_geo1_assign_RS_lights_attrs (Sop/attribwrangle)
set _obj_geo1_assign_RS_lights_attrs = `run("opadd -e -n -v attribwrangle assign_RS_lights_attrs")`
oplocate -x `$arg2 + 2.1052352975840294` -y `$arg3 + -4.7129411764705882` $_obj_geo1_assign_RS_lights_attrs
opparm $_obj_geo1_assign_RS_lights_attrs  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_geo1_assign_RS_lights_attrs snippet ( '//light_color (float 3)\n//light_temperature (float)\n//light_intensity (float)\n//The point orientation attributes, for example âNâ, can be used to align the directional lights.\n\nv@light_color = v@rand_v;\nf@light_intensity = fit01(f@rand_f, 0, 3);' )
opcolor -c 1 0.52899998426437378 0.62400001287460327 $_obj_geo1_assign_RS_lights_attrs
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_assign_RS_lights_attrs
opexprlanguage -s hscript $_obj_geo1_assign_RS_lights_attrs
opuserdata -n '___Version___' -v '' $_obj_geo1_assign_RS_lights_attrs
opset -p on $_obj_geo1_assign_RS_lights_attrs
opcf $arg1

# Node $_obj_geo1_rand_attrs_example (Sop/attribwrangle)
set _obj_geo1_rand_attrs_example = `run("opadd -e -n -v attribwrangle rand_attrs_example")`
oplocate -x `$arg2 + -0.0017499679233878851` -y `$arg3 + -2.5928411634529338` $_obj_geo1_rand_attrs_example
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector points "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }         parm {             name    "vex_precision"             baseparm             label   "VEX Precision"             export  none         }     }      parm {         name    "Seed"         label   "Seed"         type    float         default { "0" }         range   { 0 1 }     } ' $_obj_geo1_rand_attrs_example
opparm $_obj_geo1_rand_attrs_example  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_geo1_rand_attrs_example snippet ( 'f@rand_f = rand(@ptnum + chf("Seed"));\n\nfloat rand_r = rand(@rand_f + 123);\nfloat rand_g = rand(@rand_f + 456);\nfloat rand_b = rand(@rand_f + 789);\n\nv@rand_v = set(rand_r, rand_g, rand_b);' ) Seed ( 0.17499999999999999 )
opcolor -c 1 0.52899998426437378 0.62400001287460327 $_obj_geo1_rand_attrs_example
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_rand_attrs_example
opexprlanguage -s hscript $_obj_geo1_rand_attrs_example
opuserdata -n '___Version___' -v '' $_obj_geo1_rand_attrs_example
opset -p on $_obj_geo1_rand_attrs_example
opcf $arg1

# Node $_obj_geo1_OUT_points_2_RS_lights_instances (Sop/null)
set _obj_geo1_OUT_points_2_RS_lights_instances = `run("opadd -e -n -v null OUT_points_2_RS_lights_instances")`
oplocate -x `$arg2 + 2.1082352941176468` -y `$arg3 + -6.2188235294117646` $_obj_geo1_OUT_points_2_RS_lights_instances
opcolor -c 1 0.97600001096725464 0.66600000858306885 $_obj_geo1_OUT_points_2_RS_lights_instances
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_OUT_points_2_RS_lights_instances
opexprlanguage -s hscript $_obj_geo1_OUT_points_2_RS_lights_instances
opuserdata -n '___Version___' -v '18.5.351' $_obj_geo1_OUT_points_2_RS_lights_instances
opset -p on $_obj_geo1_OUT_points_2_RS_lights_instances
opcf $arg1

# Node $_obj_geo1_clean_attrs (Sop/attribdelete)
set _obj_geo1_clean_attrs = `run("opadd -e -n -v attribdelete clean_attrs")`
oplocate -x `$arg2 + -0.0021999664604663849` -y `$arg3 + -1.470588235294118` $_obj_geo1_clean_attrs
opparm $_obj_geo1_clean_attrs ptdel ( * ) vtxdel ( * ) primdel ( * ) dtldel ( * )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b on $_obj_geo1_clean_attrs
opexprlanguage -s hscript $_obj_geo1_clean_attrs
opuserdata -n '___Version___' -v '' $_obj_geo1_clean_attrs
opset -p on $_obj_geo1_clean_attrs

opcf $arg1
opcf $arg1
opwire -n $_obj_geo1_rand_attrs_example -0 $_obj_geo1_assign_RS_lights_attrs
opcf $arg1
opwire -n $_obj_geo1_clean_attrs -0 $_obj_geo1_rand_attrs_example
opcf $arg1
opwire -n $_obj_geo1_assign_RS_lights_attrs -0 $_obj_geo1_OUT_points_2_RS_lights_instances
opcf $arg1
opwire -n $_obj_geo1_get_points -0 $_obj_geo1_clean_attrs

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_OUT_points_2_RS_lights_instances
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_get_points
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="dy Object Merge" label="dy Object Merge" icon="SOP_object_merge">
    <helpURL>operator:Object/geo</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Object/geo</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if "outputnodename" in kwargs and "inputindex" in kwargs:
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if "inputnodename" in kwargs and "outputindex" in kwargs:
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if "autoplace" in kwargs:
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if "shiftclick" in kwargs and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if "nodepositionx" in kwargs and             "nodepositiony" in kwargs:
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if "node_bbox" in kwargs:
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if 'geo' not in child_type:
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_dy_get_obj (Object/geo)
set _obj_dy_get_obj = `run("opadd -e -n -v geo dy_get_obj")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_dy_get_obj
opspareds '    group {         name    "stdswitcher4"         label   "Transform"          parm {             name    "xOrd"             baseparm             label   "Transform Order"             joinnext             export  none         }         parm {             name    "rOrd"             baseparm             label   "Rotate Order"             nolabel             export  none         }         parm {             name    "t"             baseparm             label   "Translate"             export  all         }         parm {             name    "r"             baseparm             label   "Rotate"             export  all         }         parm {             name    "s"             baseparm             label   "Scale"             export  none         }         parm {             name    "p"             baseparm             label   "Pivot Translate"             export  none         }         parm {             name    "pr"             baseparm             label   "Pivot Rotate"             export  none         }         parm {             name    "scale"             baseparm             label   "Uniform Scale"             export  none         }         parm {             name    "pre_xform"             baseparm             label   "Modify Pre-Transform"             export  none         }         parm {             name    "keeppos"             baseparm             label   "Keep Position When Parenting"             export  none         }         parm {             name    "childcomp"             baseparm             label   "Child Compensation"             export  none         }         parm {             name    "constraints_on"             baseparm             label   "Enable Constraints"             export  none         }         parm {             name    "constraints_path"             baseparm             label   "Constraints"             export  none         }         parm {             name    "lookatpath"             baseparm             label   "Look At"             invisible             export  none         }         parm {             name    "lookupobjpath"             baseparm             label   "Look Up Object"             invisible             export  none         }         parm {             name    "lookup"             baseparm             label   "Look At Up Vector"             invisible             export  none         }         parm {             name    "pathobjpath"             baseparm             label   "Path Object"             invisible             export  none         }         parm {             name    "roll"             baseparm             label   "Roll"             invisible             export  none         }         parm {             name    "pos"             baseparm             label   "Position"             invisible             export  none         }         parm {             name    "uparmtype"             baseparm             label   "Parameterization"             invisible             export  none         }         parm {             name    "pathorient"             baseparm             label   "Orient Along Path"             invisible             export  none         }         parm {             name    "up"             baseparm             label   "Orient Up Vector"             invisible             export  none         }         parm {             name    "bank"             baseparm             label   "Auto-Bank factor"             invisible             export  none         }     }      group {         name    "stdswitcher4_1"         label   "Render"          parm {             name    "shop_materialpath"             baseparm             label   "Material"             export  none         }         parm {             name    "shop_materialopts"             baseparm             label   "Options"             invisible             export  none         }         parm {             name    "tdisplay"             baseparm             label   "Display"             joinnext             export  none         }         parm {             name    "display"             baseparm             label   "Display"             export  none         }         parm {             name    "viewportlod"             label   "Display As"             type    ordinal             default { "full" }             help    "Choose how the object\'s geometry should be rendered in the viewport"             menu {                 "full"      "Full Geometry"                 "points"    "Point Cloud"                 "box"       "Bounding Box"                 "centroid"  "Centroid"                 "hidden"    "Hidden"                 "subd"      "Subdivision Surface / Curves"             }             parmtag { "spare_category" "Render" }         }         parm {             name    "vm_rendervisibility"             label   "Render Visibility"             type    string             default { "*" }             menureplace {                 "*"                             "Visible to all"                 "primary"                       "Visible only to primary rays"                 "primary|shadow"                "Visible only to primary and shadow rays"                 "-primary"                      "Invisible to primary rays (Phantom)"                 "-diffuse"                      "Invisible to diffuse rays"                 "-diffuse&-reflect&-refract"    "Invisible to secondary rays"                 ""                              "Invisible (Unrenderable)"             }             parmtag { "mantra_class" "object" }             parmtag { "mantra_name" "rendervisibility" }             parmtag { "spare_category" "Render" }         }         parm {             name    "vm_rendersubd"             label   "Render Polygons As Subdivision (Mantra)"             type    toggle             default { "0" }             parmtag { "mantra_class" "object" }             parmtag { "mantra_name" "rendersubd" }             parmtag { "spare_category" "Geometry" }         }         parm {             name    "vm_subdstyle"             label   "Subdivision Style"             type    string             default { "mantra_catclark" }             hidewhen "{ vm_rendersubd == 0 }"             menu {                 "mantra_catclark"   "Mantra Catmull-Clark"                 "osd_catclark"      "OpenSubdiv Catmull-Clark"             }             parmtag { "mantra_class" "object" }             parmtag { "mantra_name" "subdstyle" }             parmtag { "spare_category" "Geometry" }         }         parm {             name    "vm_subdgroup"             label   "Subdivision Group"             type    string             default { "" }             hidewhen "{ vm_rendersubd == 0 }"             parmtag { "mantra_class" "object" }             parmtag { "mantra_name" "subdgroup" }             parmtag { "spare_category" "Geometry" }         }         parm {             name    "vm_osd_quality"             label   "Open Subdiv Quality"             type    float             default { "1" }             hidewhen "{ vm_rendersubd == 0 vm_subdstyle != osd_catclark }"             range   { 0 10 }             parmtag { "mantra_class" "object" }             parmtag { "mantra_name" "osd_quality" }             parmtag { "spare_category" "Geometry" }         }         parm {             name    "vm_osd_vtxinterp"             label   "OSD Vtx Interp"             type    integer             default { "2" }             hidewhen "{ vm_rendersubd == 0 vm_subdstyle != osd_catclark }"             menu {                 "0" "No vertex interpolation"                 "1" "Edges only"                 "2" "Edges and Corners"             }             range   { 0 10 }             parmtag { "mantra_class" "object" }             parmtag { "mantra_name" "osd_vtxinterp" }             parmtag { "spare_category" "Geometry" }         }         parm {             name    "vm_osd_fvarinterp"             label   "OSD FVar Interp"             type    integer             default { "4" }             hidewhen "{ vm_rendersubd == 0 vm_subdstyle != osd_catclark }"             menu {                 "0" "Smooth everywhere"                 "1" "Sharpen corners only"                 "2" "Sharpen edges and corners"                 "3" "Sharpen edges and propagated corners"                 "4" "Sharpen all boundaries"                 "5" "Bilinear interpolation"             }             range   { 0 10 }             parmtag { "mantra_class" "object" }             parmtag { "mantra_name" "osd_fvarinterp" }             parmtag { "spare_category" "Geometry" }         }         group {             name    "folder0"             label   "Shading"              parm {                 name    "categories"                 label   "Categories"                 type    string                 default { "" }                 help    "A list of tags which can be used to select the object"                 parmtag { "spare_category" "Shading" }             }             parm {                 name    "reflectmask"                 label   "Reflection Mask"                 type    oplist                 default { "*" }                 help    "Objects that will be reflected on this object."                 parmtag { "opexpand" "1" }                 parmtag { "opfilter" "!!OBJ/GEOMETRY!!" }                 parmtag { "oprelative" "/obj" }                 parmtag { "spare_category" "Shading" }             }             parm {                 name    "refractmask"                 label   "Refraction Mask"                 type    oplist                 default { "*" }                 help    "Objects that will be refracted on this object."                 parmtag { "opexpand" "1" }                 parmtag { "opfilter" "!!OBJ/GEOMETRY!!" }                 parmtag { "oprelative" "/obj" }                 parmtag { "spare_category" "Shading" }             }             parm {                 name    "lightmask"                 label   "Light Mask"                 type    oplist                 default { "*" }                 help    "Lights that illuminate this object."                 parmtag { "opexpand" "1" }                 parmtag { "opfilter" "!!OBJ/LIGHT!!" }                 parmtag { "oprelative" "/obj" }                 parmtag { "spare_category" "Shading" }             }             parm {                 name    "lightcategories"                 label   "Light Selection"                 type    string                 default { "*" }                 parmtag { "spare_category" "Shading" }             }             parm {                 name    "vm_lpetag"                 label   "LPE Tag"                 type    string                 default { "" }                 parmtag { "mantra_class" "object" }                 parmtag { "mantra_name" "lpetag" }                 parmtag { "spare_category" "Shading" }             }             parm {                 name    "vm_volumefilter"                 label   "Volume Filter"                 type    string                 default { "box" }                 menu {                     "box"       "Box Filter"                     "gaussian"  "Gaussian"                     "bartlett"  "Bartlett (triangle)"                     "catrom"    "Catmull-Rom"                     "hanning"   "Hanning"                     "blackman"  "Blackman"                     "sinc"      "Sinc (sharpening)"                 }                 parmtag { "mantra_class" "object" }                 parmtag { "mantra_name" "filter" }                 parmtag { "spare_category" "Shading" }             }             parm {                 name    "vm_volumefilterwidth"                 label   "Volume Filter Width"                 type    float                 default { "1" }                 range   { 0.001 5 }                 parmtag { "mantra_class" "object" }                 parmtag { "mantra_name" "filterwidth" }                 parmtag { "spare_category" "Shading" }             }             parm {                 name    "vm_matte"                 label   "Matte shading"                 type    toggle                 default { "0" }                 parmtag { "mantra_class" "object" }                 parmtag { "mantra_name" "matte" }                 parmtag { "spare_category" "Shading" }             }             parm {                 name    "vm_rayshade"                 label   "Raytrace Shading"                 type    toggle                 default { "0" }                 parmtag { "mantra_class" "object" }                 parmtag { "mantra_name" "rayshade" }                 parmtag { "spare_category" "Shading" }             }         }          group {             name    "folder0_1"             label   "Sampling"              parm {                 name    "geo_velocityblur"                 label   "Geometry Velocity Blur"                 type    ordinal                 default { "off" }                 disablewhen "{ allowmotionblur == 0 }"                 menu {                     "off"       "No Velocity Blur"                     "on"        "Velocity Blur"                     "accelblur" "Acceleration Blur"                 }             }             parm {                 name    "geo_accelattribute"                 label   "Acceleration Attribute"                 type    string                 default { "accel" }                 hidewhen "{ geo_velocityblur != accelblur }"                 parmtag { "spare_category" "Sampling" }             }         }          group {             name    "folder0_2"             label   "Dicing"              parm {                 name    "vm_shadingquality"                 label   "Shading Quality"                 type    float                 default { "1" }                 range   { 0 10 }                 parmtag { "mantra_class" "object" }                 parmtag { "mantra_name" "shadingquality" }                 parmtag { "spare_category" "Dicing" }             }             parm {                 name    "vm_flatness"                 label   "Dicing Flatness"                 type    float                 default { "0.05" }                 range   { 0 1 }                 parmtag { "mantra_class" "object" }                 parmtag { "mantra_name" "flatness" }                 parmtag { "spare_category" "Dicing" }             }             parm {                 name    "vm_raypredice"                 label   "Ray Predicing"                 type    integer                 default { "0" }                 menu {                     "0" "Disable Predicing"                     "1" "Full Predicing"                     "2" "Precompute Bounds"                 }                 range   { 0 10 }                 parmtag { "mantra_class" "object" }                 parmtag { "mantra_name" "raypredice" }                 parmtag { "spare_category" "Dicing" }             }             parm {                 name    "vm_curvesurface"                 label   "Shade Curves As Surfaces"                 type    toggle                 default { "0" }                 parmtag { "mantra_class" "object" }                 parmtag { "mantra_name" "curvesurface" }                 parmtag { "spare_category" "Dicing" }             }         }          group {             name    "folder0_3"             label   "Geometry"              parm {                 name    "vm_rmbackface"                 label   "Backface Removal"                 type    toggle                 default { "0" }                 parmtag { "mantra_class" "object" }                 parmtag { "mantra_name" "rmbackface" }                 parmtag { "spare_category" "Geometry" }             }             parm {                 name    "shop_geometrypath"                 label   "Procedural Shader"                 type    oppath                 default { "" }                 parmtag { "opfilter" "!!SHOP/GEOMETRY!!" }                 parmtag { "oprelative" "." }                 parmtag { "spare_category" "Geometry" }             }             parm {                 name    "vm_forcegeometry"                 label   "Force Procedural Geometry Output"                 type    toggle                 default { "1" }                 parmtag { "spare_category" "Geometry" }             }             parm {                 name    "vm_rendersubdcurves"                 label   "Render Polygon Curves As Subdivision (Mantra)"                 type    toggle                 default { "0" }                 parmtag { "mantra_class" "object" }                 parmtag { "mantra_name" "rendersubdcurves" }                 parmtag { "spare_category" "Geometry" }             }             parm {                 name    "vm_renderpoints"                 label   "Render As Points (Mantra)"                 type    integer                 default { "2" }                 menu {                     "0" "No Point Rendering"                     "1" "Render Only Points"                     "2" "Render Unconnected Points"                 }                 range   { 0 10 }                 parmtag { "mantra_class" "object" }                 parmtag { "mantra_name" "renderpoints" }                 parmtag { "spare_category" "Geometry" }             }             parm {                 name    "vm_renderpointsas"                 label   "Render Points As (Mantra)"                 type    integer                 default { "0" }                 disablewhen "{ vm_renderpoints == 0 }"                 menu {                     "0" "Spheres"                     "1" "Circles"                 }                 range   { 0 10 }                 parmtag { "mantra_class" "object" }                 parmtag { "mantra_name" "renderpointsas" }                 parmtag { "spare_category" "Geometry" }             }             parm {                 name    "vm_usenforpoints"                 label   "Use N For Point Rendering"                 type    toggle                 default { "0" }                 disablewhen "{ vm_renderpoints == 0 }"                 parmtag { "mantra_class" "object" }                 parmtag { "mantra_name" "usenforpoints" }                 parmtag { "spare_category" "Geometry" }             }             parm {                 name    "vm_pointscale"                 label   "Point Scale"                 type    float                 default { "1" }                 disablewhen "{ vm_renderpoints == 0 }"                 range   { 0! 10 }                 parmtag { "mantra_class" "object" }                 parmtag { "mantra_name" "pointscale" }                 parmtag { "spare_category" "Geometry" }             }             parm {                 name    "vm_pscalediameter"                 label   "Treat Point Scale as Diameter Instead of Radius"                 type    toggle                 default { "0" }                 parmtag { "mantra_class" "object" }                 parmtag { "mantra_name" "pscalediameter" }                 parmtag { "spare_category" "Geometry" }             }             parm {                 name    "vm_metavolume"                 label   "Metaballs as Volume"                 type    toggle                 default { "0" }                 parmtag { "mantra_class" "object" }                 parmtag { "mantra_name" "metavolume" }                 parmtag { "spare_category" "Geometry" }             }             parm {                 name    "vm_coving"                 label   "Coving"                 type    integer                 default { "1" }                 menu {                     "0" "Disable Coving"                     "1" "Coving for displacement/sub-d"                     "2" "Coving for all primitives"                 }                 range   { 0 10 }                 parmtag { "mantra_class" "object" }                 parmtag { "mantra_name" "coving" }                 parmtag { "spare_category" "Geometry" }             }             parm {                 name    "vm_materialoverride"                 label   "Material Override"                 type    string                 default { "compact" }                 menu {                     "none"      "Disabled"                     "full"      "Evaluate for Each Primitve/Point"                     "compact"   "Evaluate Once"                 }                 parmtag { "spare_category" "Geometry" }             }             parm {                 name    "vm_overridedetail"                 label   "Ignore Geometry Attribute Shaders"                 type    toggle                 default { "0" }                 parmtag { "mantra_class" "object" }                 parmtag { "mantra_name" "overridedetail" }                 parmtag { "spare_category" "Geometry" }             }             parm {                 name    "vm_procuseroottransform"                 label   "Proc Use Root Transform"                 type    toggle                 default { "1" }                 parmtag { "mantra_class" "object" }                 parmtag { "mantra_name" "procuseroottransform" }                 parmtag { "spare_category" "Geometry" }             }         }      }      group {         name    "stdswitcher4_2"         label   "Misc"          parm {             name    "use_dcolor"             baseparm             label   "Set Wireframe Color"             export  none         }         parm {             name    "dcolor"             baseparm             label   "Wireframe Color"             export  none         }         parm {             name    "picking"             baseparm             label   "Viewport Selecting Enabled"             export  none         }         parm {             name    "pickscript"             baseparm             label   "Select Script"             export  none         }         parm {             name    "caching"             baseparm             label   "Cache Object Transform"             export  none         }         parm {             name    "vport_shadeopen"             baseparm             label   "Shade Open Curves In Viewport"             export  none         }         parm {             name    "vport_displayassubdiv"             baseparm             label   "Display as Subdivision in Viewport"             invisible             export  none         }         parm {             name    "vport_onionskin"             baseparm             label   "Onion Skinning"             export  none         }     }      group {         name    "stdswitcher4_3"         label   "Redshift OBJ"          group {             name    "RS_objprop_switcher"             label   "Settings"              parm {                 name    "RS_objpro_first"                 label   "RS_objpro_first"                 type    integer                 invisible                 default { "0" }                 range   { 0 10 }             }             group {                 name    "RS_campropshapes_switcher"                 label   "Render"                  parm {                     name    "RS_objprop_ID"                     label   "Object ID"                     type    integer                     default { "0" }                     range   { 0! 100 }                 }                 parm {                     name    "RS_objprop_CryptoID"                     label   "Cryptomatte ID"                     type    string                     default { "" }                 }                 parm {                     name    "RS_objprop_CryptoMatID_AllMat"                     label   "Create Cryptomatte Material IDs From Not Available Materials"                     type    toggle                     default { "0" }                 }                 parm {                     name    "RS_objpro_sep00"                     label   "RS_objpro_sep00"                     type    separator                     default { "" }                 }                 parm {                     name    "RS_objprop_ngons_enable"                     label   "Triangulate NGons"                     type    toggle                     default { "1" }                 }                 parm {                     name    "RS_objprop_ngons_avoidDegen"                     label   "Remove NGons degenerated polygons"                     type    toggle                     default { "0" }                     disablewhen "{ RS_objprop_ngons_enable == 0 }"                 }                 parm {                     name    "RS_objprop_tangents_enable"                     label   "Force Compute Vertex Tangents from the object UV map"                     type    toggle                     default { "0" }                 }                 parm {                     name    "RS_objprop_normals_normalize"                     label   "Normalize Transformed Normal Maps"                     type    toggle                     default { "0" }                 }                 parm {                     name    "RS_objpro_sep0a"                     label   "RS_objpro_sep0a"                     type    separator                     default { "" }                 }                 parm {                     name    "RS_objprop_renderAsHair"                     label   "Render Polygons as Hair"                     type    toggle                     default { "0" }                 }                 parm {                     name    "RS_objprop_defaultHairWidth"                     label   "Default Hair Width"                     type    float                     default { "0.01" }                     range   { 0! 1 }                 }                 parm {                     name    "RS_objprop_hairHalfThickness"                     label   "Match Houdini/Mantra Hair Thickness"                     type    toggle                     default { "0" }                 }                 parm {                     name    "RS_objpro_sep0b"                     label   "RS_objpro_sep0b"                     type    separator                     default { "" }                 }                 parm {                     name    "RS_objprop_mb_trans"                     label   "Enable Transformations Motion Blur"                     type    toggle                     default { "1" }                 }                 parm {                     name    "RS_objprop_mb_def"                     label   "Enable Mesh Deformations Motion Blur"                     type    toggle                     default { "1" }                 }                 parm {                     name    "RS_objprop_mb_points"                     label   "Enable Instances/Particles Motion Blur"                     type    toggle                     default { "1" }                 }                 parm {                     name    "RS_objprop_mb_def_use_v"                     label   "Mesh Deformations Blur From Velocity Attribute"                     type    toggle                     default { "0" }                 }                 parm {                     name    "RS_objprop_mb_v_attr"                     label   "Velocity Point Attribute"                     type    string                     default { "v" }                 }                 parm {                     name    "RS_objprop_mb_deformSteps"                     label   "Deform./Particles Steps"                     type    ordinal                     default { "0" }                     menu {                         "-1"    "Auto"                         "2"     "2 steps"                         "3"     "3 steps"                         "5"     "5 steps"                         "9"     "9 steps"                         "17"    "17 steps"                     }                 }                 parm {                     name    "RS_objprop_mb_fd_scale"                     label   "Frame Duration Scale"                     type    float                     default { "1" }                     range   { 0 1 }                 }                 parm {                     name    "RS_objprop_mb_offset"                     label   "Shutter Center Offset"                     type    float                     default { "0" }                     range   { -1 1 }                 }                 parm {                     name    "RS_objpro_sep0c"                     label   "RS_objpro_sep0c"                     type    separator                     default { "" }                 }                 parm {                     name    "RS_objprop_renderSOPsubnets"                     label   "Render the OBJ nodes inside OBJ/SOP subnets"                     type    toggle                     default { "1" }                 }             }              group {                 name    "RS_campropshapes_switcher_1"                 label   "Primitive Tessellation"                  parm {                     name    "RS_objprop_tess_enable"                     label   "Tessellate primitives"                     type    toggle                     default { "0" }                 }                 parm {                     name    "RS_objprop_tess_u"                     label   "U subdivisions"                     type    integer                     default { "1" }                     disablewhen "{ RS_objprop_tess_enable == 0 }"                     range   { 0! 16! }                 }                 parm {                     name    "RS_objprop_tess_v"                     label   "V subdivisions"                     type    integer                     default { "1" }                     disablewhen "{ RS_objprop_tess_enable == 0 }"                     range   { 0! 16! }                 }                 parm {                     name    "RS_objprop_tess_trim"                     label   "Trimming subdivisions"                     type    integer                     default { "1" }                     disablewhen "{ RS_objprop_tess_enable == 0 }"                     range   { 0! 16! }                 }             }              group {                 name    "RS_campropshapes_switcher_2"                 label   "Instancing"                  parm {                     name    "RS_objprop_inst_mode"                     label   "Instancing Using"                     type    ordinal                     default { "0" }                     menu {                         "insInstances"      "Redshift Instances"                         "insPointClouds"    "Redshift Point Clouds"                     }                 }                 parm {                     name    "RS_objprop_inst_mb"                     label   "Instances/Particles Motion Blur"                     type    ordinal                     default { "1" }                     menu {                         "insMBVectors"  "Compute sub-frame geometry (deformation)"                         "insMBFull"     "Use point velocity attribute"                     }                 }                 parm {                     name    "RS_objprop_inst_lightShader"                     label   "Lights Instancing"                     type    ordinal                     default { "1" }                     menu {                         "insLightsNotShared"    "Attributes support using individual shaders"                         "insLightsShared"       "Using a common shared shader"                     }                 }                 parm {                     name    "RS_objprop_inst_universalIF"                     label   "\'instancefile\' Mode"                     type    ordinal                     default { "0" }                     menu {                         "0" "Instance Redshift Proxy Objects"                         "1" "Instance Houdini Compatible Objects"                     }                 }                 parm {                     name    "RS_objprop_inst_ignorePivot"                     label   "Ignore Pivot Point Attribute"                     type    toggle                     default { "1" }                 }                 parm {                     name    "RS_objprop_inst_fileOverride"                     label   "Override \'instancefile\' Proxy Materials From Scene Materials"                     type    toggle                     default { "0" }                 }                 parm {                     name    "RS_objprop_inst_packed"                     label   "Process \'instance\' and \'instancefile\' Attrs. Inside Packed Primitives"                     type    toggle                     default { "0" }                 }                 parm {                     name    "RS_objprop_inst_PackedPrimInstancing"                     label   "Instance SOP Level Packed Primitives"                     type    toggle                     default { "0" }                 }                 parm {                     name    "RS_objprop_inst_subnetInstancing"                     label   "Instance Subnets"                     type    toggle                     default { "0" }                 }             }              group {                 name    "RS_campropshapes_switcher_3"                 label   "Attributes"                  parm {                     name    "RS_objprop_attr_auto"                     label   "Enable Automatic Attributes Extraction"                     type    toggle                     default { "1" }                 }                 parm {                     name    "RS_objprop_attr_vertex"                     label   "Vertex Attributes"                     type    string                     default { "" }                     disablewhen "{ RS_objprop_attr_auto == 1 }"                     menutoggle {                         [ "result = []                                                           " ]                         [ "geo = hou.pwd().renderNode().geometry()  " ]                         [ "for attr in geo.vertexAttribs():         " ]                         [ "        result.append(attr.name())               " ]                         [ "        result.append(attr.name())               " ]                         [ "return result                                                    " ]                         language python                     }                 }                 parm {                     name    "RS_objprop_attr_points"                     label   "Point Attributes"                     type    string                     default { "" }                     disablewhen "{ RS_objprop_attr_auto == 1 }"                     menutoggle {                         [ "result = []                                                            " ]                         [ "geo = hou.pwd().renderNode().geometry()  " ]                         [ "for attr in geo.pointAttribs():                  " ]                         [ "        result.append(attr.name())               " ]                         [ "        result.append(attr.name())               " ]                         [ "return result                                                    " ]                         language python                     }                 }                 parm {                     name    "RS_objprop_attr_primitives"                     label   "Strand Attributes"                     type    string                     default { "" }                     disablewhen "{ RS_objprop_attr_auto == 1 }"                     menutoggle {                         [ "result = []                                                               " ]                         [ "geo = hou.pwd().renderNode().geometry()  " ]                         [ "for attr in geo.primAttribs():                   " ]                         [ "        result.append(attr.name())               " ]                         [ "        result.append(attr.name())               " ]                         [ "return result                                                    " ]                         language python                     }                 }                 parm {                     name    "RS_objprop_attr_detail"                     label   "Object Attributes"                     type    string                     default { "" }                     disablewhen "{ RS_objprop_attr_auto == 1 }"                     menutoggle {                         [ "result = []                                                           " ]                         [ "geo = hou.pwd().renderNode().geometry()  " ]                         [ "for attr in geo.globalAttribs():         " ]                         [ "        result.append(attr.name())               " ]                         [ "        result.append(attr.name())               " ]                         [ "return result                                                    " ]                         language python                     }                 }                 parm {                     name    "RS_objprop_attr_detail_sep"                     label   "RS_objprop_attr_detail_sep"                     type    separator                     default { "" }                 }                 parm {                     name    "RS_objprop_pckattr_promotion"                     label   "Enable Packed Geo Point Attributes Promotion"                     type    toggle                     default { "1" }                 }                 parm {                     name    "RS_objprop_pckattr_replace"                     label   "Replace Attributes"                     type    string                     default { "Cd" }                     disablewhen "{ RS_objprop_pckattr_promotion == 0 }"                     menutoggle {                         [ "result = []                                                          " ]                         [ "geo = hou.pwd().renderNode().geometry()  " ]                         [ "for attr in geo.pointAttribs():                  " ]                         [ "        result.append(attr.name())               " ]                         [ "        result.append(attr.name())               " ]                         [ "return result                                                    " ]                         language python                     }                 }                 parm {                     name    "RS_objprop_pckattr_mult"                     label   "Mult. Attributes"                     type    string                     default { "scale pscale" }                     disablewhen "{ RS_objprop_pckattr_promotion == 0 }"                     menutoggle {                         [ "result = []                                                               " ]                         [ "geo = hou.pwd().renderNode().geometry()  " ]                         [ "for attr in geo.pointAttribs():                  " ]                         [ "        result.append(attr.name())               " ]                         [ "        result.append(attr.name())               " ]                         [ "return result                                                    " ]                         language python                     }                 }                 parm {                     name    "RS_objprop_pckattr_add"                     label   "Add Attributes"                     type    string                     default { "v" }                     disablewhen "{ RS_objprop_pckattr_promotion == 0 }"                     menutoggle {                         [ "result = []                                                             " ]                         [ "geo = hou.pwd().renderNode().geometry()  " ]                         [ "for attr in geo.pointAttribs():                  " ]                         [ "        result.append(attr.name())               " ]                         [ "        result.append(attr.name())               " ]                         [ "return result                                                    " ]                         language python                     }                 }             }              group {                 name    "RS_campropshapes_switcher_4"                 label   "Tracesets"                  parm {                     name    "RS_objprop_tracesets_enabled"                     label   "Enable Tracesets"                     type    toggle                     default { "0" }                 }                 parm {                     name    "RS_objprop_tracesets_reflection"                     label   "Reflections Enabled For"                     type    oplist                     default { "*" }                     disablewhen "{ RS_objprop_tracesets_enabled == 0 }"                     parmtag { "opfilter" "!!OBJ/GEOMETRY!!" }                     parmtag { "oprelative" "/obj" }                 }                 parm {                     name    "RS_objprop_tracesets_refraction"                     label   "Refractions Enabled For"                     type    oplist                     default { "*" }                     disablewhen "{ RS_objprop_tracesets_enabled == 0 }"                     parmtag { "opfilter" "!!OBJ/GEOMETRY!!" }                     parmtag { "oprelative" "/obj" }                 }                 parm {                     name    "RS_objprop_tracesets_sss"                     label   "SSS Enabled For"                     type    oplist                     invisible                     default { "*" }                     disablewhen "{ RS_objprop_tracesets_enabled == 0 }"                     parmtag { "opfilter" "!!OBJ/GEOMETRY!!" }                     parmtag { "oprelative" "/obj" }                 }             }              group {                 name    "RS_campropshapes_switcher_5"                 label   "IPR"                  parm {                     name    "RS_objprop_ipr_forceMeshUpdate"                     label   "IPR force the mesh updating of OBJ nodes inside subnets"                     type    toggle                     default { "0" }                 }             }          }          group {             name    "RS_objprop_switcher_1"             label   "Proxy"              parm {                 name    "RS_objpro_label5"                 label   " "                 type    label                 default { "" }             }             parm {                 name    "RS_objprop_proxy_enable"                 label   "Enable Proxy File"                 type    toggle                 default { "0" }                 parmtag { "script_callback" "nodes = hou.pwd().children()                                               \\nfor child in nodes:                                                                  \\n    if child.type().name() == \'redshift_proxySOP\': \\n         child.cook(True)                                                    \\n" }                 parmtag { "script_callback_language" "python" }             }             parm {                 name    "RS_objprop_proxy_file"                 label   "Proxy Filename"                 type    file                 default { "$HIP/filename.$F4.rs" }                 disablewhen "{ RS_objprop_proxy_enable == 0 }"                 parmtag { "script_callback" "nodes = hou.pwd().children()                                               \\nfor child in nodes:                                                                  \\n    if child.type().name() == \'redshift_proxySOP\': \\n         child.cook(True)                                                    \\n" }                 parmtag { "script_callback_language" "python" }             }             parm {                 name    "RS_objpro_sep5a"                 label   "RS_objpro_sep5a"                 type    separator                 default { "" }             }             parm {                 name    "RS_objprop_proxy_preview"                 label   "Display Mode"                 type    ordinal                 default { "1" }                 disablewhen "{ RS_objprop_proxy_enable == 0 }"                 menu {                     "proxyPrevNone"     "None"                     "proxyPrevBB"       "Bounding Box"                     "proxyPrevSolid"    "Mesh"                     "proxyPrevPoints"   "Points"                 }                 parmtag { "script_callback" "nodes = hou.pwd().children()                                         \\nfor child in nodes:                                                                  \\n    if child.type().name() == \'redshift_proxySOP\': \\n         child.cook(True)                                                    \\n" }                 parmtag { "script_callback_language" "python" }             }             parm {                 name    "RS_objprop_proxy_prevPercent"                 label   "Display Percentage"                 type    float                 default { "1" }                 disablewhen "{ RS_objprop_proxy_enable == 0 } { RS_objprop_proxy_preview == proxyPrevNone } { RS_objprop_proxy_preview == proxyPrevBB }"                 range   { 0! 1! }                 parmtag { "script_callback" "nodes = hou.pwd().children()                                          \\nfor child in nodes:                                                                  \\n    if child.type().name() == \'redshift_proxySOP\': \\n         child.cook(True)                                                    \\n" }                 parmtag { "script_callback_language" "python" }             }             parm {                 name    "RS_objprop_proxy_prevLines"                 label   "Display Lines"                 type    toggle                 default { "1" }                 disablewhen "{ RS_objprop_proxy_enable == 0 } { RS_objprop_proxy_preview == proxyPrevNone } { RS_objprop_proxy_preview == proxyPrevBB }"                 parmtag { "script_callback" "nodes = hou.pwd().children()                                          \\nfor child in nodes:                                                                  \\n    if child.type().name() == \'redshift_proxySOP\': \\n         child.cook(True)                                                    \\n" }                 parmtag { "script_callback_language" "python" }             }             parm {                 name    "RS_objprop_proxy_prevAnimated"                 label   "Animated Preview"                 type    toggle                 default { "0" }                 disablewhen "{ RS_objprop_proxy_enable == 0 } { RS_objprop_proxy_preview == proxyPrevNone }"                 parmtag { "script_callback" "nodes = hou.pwd().children()                                                \\nfor child in nodes:                                                                  \\n    if child.type().name() == \'redshift_proxySOP\': \\n         child.cook(True)                                                    \\n" }                 parmtag { "script_callback_language" "python" }             }             parm {                 name    "RS_objpro_sep5b"                 label   "RS_objpro_sep5b"                 type    separator                 default { "" }             }             parm {                 name    "RS_objprop_proxy_materials"                 label   "Proxy Materials"                 type    ordinal                 default { "0" }                 disablewhen "{ RS_objprop_proxy_enable == 0 }"                 menu {                     "proxyMatProxy"     "From Proxy"                     "proxyMatObject"    "From OBJ Node"                     "proxyMatOverride"  "Full Override"                     "proxyMatOvrList"   "List Override"                     "proxyMatOvrScene"  "From Scene Materials"                 }             }             parm {                 name    "RS_objprop_proxy_override"                 label   "Full Override Material"                 type    oppath                 default { "" }                 disablewhen "{ RS_objprop_proxy_enable == 0 } { RS_objprop_proxy_materials != proxyMatOverride }"                 parmtag { "opfilter" "!!VOP!!" }                 parmtag { "oprelative" "." }             }             multiparm {                 name    "RS_objprop_proxy_overrideList"                 label    "Material Override List"                  parm {                     name    "RS_objprop_proxy_overrideListFrom_#"                     label   "Replace Material"                     type    string                     joinnext                     default { "" }                     disablewhen "{ RS_objprop_proxy_enable == 0 } { RS_objprop_proxy_materials != proxyMatOvrList }"                     menureplace {                         [ "set directory = `run(\\"pwd\\")`                                                                             " ]                         [ "set command = `\\"Redshift_getProxyMaterials -n $directory \\"`       " ]                         [ "set materials = `run($command)`                                                                             " ]                         [ "echo $materials                                                                                                          " ]                     }                 }                 parm {                     name    "RS_objprop_proxy_overrideListTo_#"                     label   "With"                     type    oppath                     default { "" }                     disablewhen "{ RS_objprop_proxy_enable == 0 } { RS_objprop_proxy_materials != proxyMatOvrList }"                     parmtag { "opfilter" "!!VOP!!" }                     parmtag { "oprelative" "." }                 }             }              parm {                 name    "RS_objpro_sep5c"                 label   "RS_objpro_sep5c"                 type    separator                 default { "" }             }             parm {                 name    "RS_objprop_proxy_elements_mesh"                 label   "Exclude Meshes"                 type    string                 default { "" }                 menutoggle {                     [ "set directory = `run(\\"pwd\\")`                                                                           " ]                     [ "set command = `\\"Redshift_getProxyElements -n $directory -t mesh\\"` " ]                     [ "set elements = `run($command)`                                                                              " ]                     [ "echo $elements                                                                                                               " ]                 }             }             parm {                 name    "RS_objprop_proxy_elements_volume"                 label   "Exclude Volumes"                 type    string                 default { "" }                 menutoggle {                     [ "set directory = `run(\\"pwd\\")`                                                                          " ]                     [ "set command = `\\"Redshift_getProxyElements -n $directory -t volume\\"` " ]                     [ "set elements = `run($command)`                                                                            " ]                     [ "echo $elements                                                                                                               " ]                 }             }             parm {                 name    "RS_objprop_proxy_elements_light"                 label   "Exclude Lights"                 type    string                 default { "" }                 menutoggle {                     [ "set directory = `run(\\"pwd\\")`                                                                            " ]                     [ "set command = `\\"Redshift_getProxyElements -n $directory -t light\\"` " ]                     [ "set elements = `run($command)`                                                                             " ]                     [ "echo $elements                                                                                                               " ]                 }             }             parm {                 name    "RS_objprop_proxy_elements_proxy"                 label   "Exclude Proxies"                 type    string                 default { "" }                 menutoggle {                     [ "set directory = `run(\\"pwd\\")`                                                                           " ]                     [ "set command = `\\"Redshift_getProxyElements -n $directory -t proxy\\"` " ]                     [ "set elements = `run($command)`                                                                             " ]                     [ "echo $elements                                                                                                               " ]                 }             }             parm {                 name    "RS_objpro_sep5d"                 label   "RS_objpro_sep5d"                 type    separator                 default { "" }             }             parm {                 name    "RS_objprop_proxy_ovrID"                 label   "Override Object ID"                 type    toggle                 default { "0" }             }             parm {                 name    "RS_objprop_proxy_ovrVis"                 label   "Override Visibility & Matte"                 type    toggle                 default { "0" }             }             parm {                 name    "RS_objprop_proxy_ovrTess"                 label   "Override Tessellation & Displacement"                 type    toggle                 default { "0" }             }             parm {                 name    "RS_objprop_proxy_ovrTraceS"                 label   "Override Tracesets"                 type    toggle                 default { "0" }             }             parm {                 name    "RS_objprop_proxy_ovrUserData"                 label   "Override User Data"                 type    toggle                 default { "0" }             }         }          group {             name    "RS_objprop_switcher_2"             label   "Visibility"              parm {                 name    "RS_objpro_label1o"                 label   " "                 type    label                 default { "" }             }             parm {                 name    "MESHFLAG_PRIMARYRAYVISIBLE"                 label   "Primary Ray Visible"                 type    toggle                 default { "1" }             }             parm {                 name    "MESHFLAG_SECONDARYRAYVISIBLE"                 label   "Seconday Ray Visible"                 type    toggle                 default { "1" }             }             parm {                 name    "RS_objpro_sep1a"                 label   "RS_objpro_sep1a"                 type    separator                 default { "" }             }             parm {                 name    "MESHFLAG_SHADOWCASTER"                 label   "Casts Shadows"                 type    toggle                 default { "1" }             }             parm {                 name    "MESHFLAG_SHADOWRECEIVER"                 label   "Receives Shadows"                 type    toggle                 default { "1" }             }             parm {                 name    "MESHFLAG_NOSELFSHADOW"                 label   "Self-Shadows"                 type    toggle                 default { "1" }             }             parm {                 name    "MESHFLAG_AOCASTER"                 label   "Cast AO"                 type    toggle                 default { "1" }             }             parm {                 name    "RS_objpro_sep1b"                 label   "RS_objpro_sep1b"                 type    separator                 default { "" }             }             parm {                 name    "MESHFLAG_REFLECTIONVISIBLE"                 label   "Visible in Reflections"                 type    toggle                 default { "1" }                 disablewhen "{ MESHFLAG_SECONDARYRAYVISIBLE == 0 }"             }             parm {                 name    "MESHFLAG_REFRACTIONVISIBLE"                 label   "Visible in Refractions"                 type    toggle                 default { "1" }                 disablewhen "{ MESHFLAG_SECONDARYRAYVISIBLE == 0 }"             }             parm {                 name    "MESHFLAG_REFLECTIONCASTER"                 label   "Casts Reflections"                 type    toggle                 default { "1" }                 disablewhen "{ MESHFLAG_SECONDARYRAYVISIBLE == 0 }"             }             parm {                 name    "MESHFLAG_REFRACTIONCASTER"                 label   "Casts Refractions"                 type    toggle                 default { "1" }                 disablewhen "{ MESHFLAG_SECONDARYRAYVISIBLE == 0 }"             }             parm {                 name    "RS_objpro_sep1c"                 label   "RS_objpro_sep1c"                 type    separator                 default { "" }             }             parm {                 name    "MESHFLAG_FGVISIBLE"                 label   "Visible to Non-Photon GI"                 type    toggle                 default { "1" }                 disablewhen "{ MESHFLAG_SECONDARYRAYVISIBLE == 0 }"             }             parm {                 name    "MESHFLAG_GIVISIBLE"                 label   "Visible to GI Photons"                 type    toggle                 default { "1" }             }             parm {                 name    "MESHFLAG_CAUSTICVISIBLE"                 label   "Visible to Caustics Photons"                 type    toggle                 default { "1" }                 disablewhen "{ MESHFLAG_SECONDARYRAYVISIBLE == 0 }"             }             parm {                 name    "RS_objpro_sep1d"                 label   "RS_objpro_sep1d"                 type    separator                 default { "" }             }             parm {                 name    "MESHFLAG_FGCASTER"                 label   "Receives GI"                 type    toggle                 default { "1" }                 disablewhen "{ MESHFLAG_SECONDARYRAYVISIBLE == 0 }"             }             parm {                 name    "MESHFLAG_FORCEBRUTEFORCEGI"                 label   "Force Brute-Force GI"                 type    toggle                 default { "0" }                 disablewhen "{ MESHFLAG_SECONDARYRAYVISIBLE == 0 }"             }             parm {                 name    "MESHFLAG_GICASTER"                 label   "Casts GI Photons"                 type    toggle                 default { "1" }             }             parm {                 name    "MESHFLAG_CAUSTICCASTER"                 label   "Casts Caustics Photons"                 type    toggle                 default { "0" }             }         }          group {             name    "RS_objprop_switcher_3"             label   "Tessellation / Displacement"              parm {                 name    "RS_objpro_label2"                 label   " "                 type    label                 default { "" }             }             parm {                 name    "RS_objprop_rstess_enable"                 label   "Enable Tessellation"                 type    toggle                 default { "0" }             }             parm {                 name    "RS_objprop_rstess_rule"                 label   "Subdivision Rule"                 type    ordinal                 default { "0" }                 disablewhen "{ RS_objprop_rstess_enable == 0 }"                 menu {                     "ccLoop"    "Catmull-Clark + Loop"                     "ccOnly"    "Catmull-Clark Only"                 }             }             parm {                 name    "RS_objprop_rstess_ssadaptive"                 label   "Screen Space Adaptive"                 type    toggle                 default { "1" }                 disablewhen "{ RS_objprop_rstess_enable == 0 }"             }             parm {                 name    "RS_objprop_rstess_smoothsub"                 label   "Smooth subdivision"                 type    toggle                 default { "1" }                 disablewhen "{ RS_objprop_rstess_enable == 0 }"             }             parm {                 name    "RS_objprop_rstess_triQuads"                 label   "Triangulate Quads"                 type    toggle                 default { "0" }                 disablewhen "{ RS_objprop_rstess_enable == 0 }"             }             parm {                 name    "RS_objprop_rstess_melenght"                 label   "Minimum Edge Length"                 type    float                 default { "4" }                 disablewhen "{ RS_objprop_rstess_enable == 0 }"                 range   { 0! 32 }             }             parm {                 name    "RS_objprop_rstess_maxsubd"                 label   "Maximum Subdivisions"                 type    integer                 default { "6" }                 disablewhen "{ RS_objprop_rstess_enable == 0 }"                 range   { 0! 16 }             }             parm {                 name    "RS_objprop_rstess_ooftf"                 label   "Out of Frustum Tessellation Factor"                 type    float                 default { "4" }                 disablewhen "{ RS_objprop_rstess_enable == 0 }"                 range   { 0! 32 }             }             parm {                 name    "RS_objprop_rstess_looft"                 label   "Limit Out of Frust. Tessellation"                 type    toggle                 default { "0" }                 disablewhen "{ RS_objprop_rstess_enable == 0 }"             }             parm {                 name    "RS_objprop_rstess_looftSubd"                 label   "Max Out of Frust. Subdivs"                 type    integer                 default { "6" }                 disablewhen "{ RS_objprop_rstess_enable == 0 } { RS_objprop_rstess_looft == 0 }"                 range   { 0! 16 }             }             parm {                 name    "RS_objprop_rstess_smooth"                 label   "Disable UV\'s Smoothing "                 type    toggle                 default { "0" }                 disablewhen "{ RS_objprop_rstess_enable == 0 }"             }             parm {                 name    "RS_objprop_rstess_smoothBound"                 label   "Smooth UV Boundaries"                 type    toggle                 default { "1" }                 disablewhen "{ RS_objprop_rstess_enable == 0 }"             }             parm {                 name    "RS_objpro_sepTessellationDisplacement"                 label   "RS_objpro_sepTessellationDisplacement"                 type    separator                 default { "" }             }             parm {                 name    "RS_objpro_label3"                 label   " "                 type    label                 default { "" }             }             parm {                 name    "RS_objprop_displace_enable"                 label   "Enable Displacement"                 type    toggle                 default { "0" }             }             parm {                 name    "RS_objprop_displace_max"                 label   "Maximum Displacement"                 type    log                 default { "1" }                 disablewhen "{ RS_objprop_displace_enable == 0 }"                 range   { 0! 1000 }             }             parm {                 name    "RS_objprop_displace_scale"                 label   "Displacement Scale"                 type    log                 default { "1" }                 disablewhen "{ RS_objprop_displace_enable == 0 }"                 range   { 0! 1000 }             }             parm {                 name    "RS_objprop_displace_autob"                 label   "Enable Auto Bump Mapping"                 type    toggle                 default { "1" }                 disablewhen "{ RS_objprop_displace_enable == 0 }"             }         }          group {             name    "RS_objprop_switcher_4"             label   "Matte"              parm {                 name    "RS_objpro_label4"                 label   " "                 type    label                 default { "" }             }             parm {                 name    "RS_objprop_matte_enable"                 label   "Matte Enable"                 type    toggle                 default { "0" }             }             parm {                 name    "RS_objprop_matte_showbackg"                 label   "Show Background"                 type    toggle                 default { "1" }                 disablewhen "{ RS_objprop_matte_enable == 0 }"             }             parm {                 name    "RS_objprop_matte_applysec"                 label   "Apply to Second Rays"                 type    toggle                 default { "0" }                 disablewhen "{ RS_objprop_matte_enable == 0 }"             }             parm {                 name    "RS_objprop_matte_abyml"                 label   "Affected By Matte Lights"                 type    toggle                 default { "0" }                 disablewhen "{ RS_objprop_matte_enable == 0 }"             }             parm {                 name    "RS_objprop_matte_includePM"                 label   "Include In Puzzle-Mattes"                 type    toggle                 default { "0" }                 disablewhen "{ RS_objprop_matte_enable == 0 }"             }             parm {                 name    "RS_objprop_matte_alpha"                 label   "Alpha"                 type    float                 default { "1" }                 disablewhen "{ RS_objprop_matte_enable == 0 }"                 range   { 0! 1! }             }             parm {                 name    "RS_objprop_matte_reflscale"                 label   "Reflection Scale"                 type    float                 default { "0" }                 disablewhen "{ RS_objprop_matte_enable == 0 }"                 range   { 0! 1! }             }             parm {                 name    "RS_objprop_matte_refrscale"                 label   "Refraction Scale"                 type    float                 default { "0" }                 disablewhen "{ RS_objprop_matte_enable == 0 }"                 range   { 0! 1! }             }             parm {                 name    "RS_objprop_matte_diffscale"                 label   "Diffuse Scale"                 type    float                 default { "0" }                 disablewhen "{ RS_objprop_matte_enable == 0 }"                 range   { 0! 1! }             }             parm {                 name    "RS_objpro_sep4b"                 label   "RS_objpro_sep4b"                 type    separator                 default { "" }             }             parm {                 name    "RS_objprop_matte_shadowenable"                 label   "Shadow Enable"                 type    toggle                 default { "0" }                 disablewhen "{ RS_objprop_matte_enable == 0 }"             }             parm {                 name    "RS_objprop_matte_shadowsFromM"                 label   "Receive Shadows From Mattes"                 type    toggle                 default { "1" }                 disablewhen "{ RS_objprop_matte_enable == 0 } { RS_objprop_matte_shadowenable == 0 }"             }             parm {                 name    "RS_objprop_matte_shadowalpha"                 label   "Affect Alpha"                 type    toggle                 default { "0" }                 disablewhen "{ RS_objprop_matte_enable == 0 } { RS_objprop_matte_shadowenable == 0 }"             }             parm {                 name    "RS_objprop_matte_shadowcolor"                 label   "Color"                 type    color                 size    3                 default { "0" "0" "0" }                 disablewhen "{ RS_objprop_matte_enable == 0 } { RS_objprop_matte_shadowenable == 0 }"                 range   { 0 1 }             }             parm {                 name    "RS_objprop_matte_shadowtrans"                 label   "Transparency"                 type    float                 default { "0" }                 disablewhen "{ RS_objprop_matte_enable == 0 } { RS_objprop_matte_shadowenable == 0 }"                 range   { 0! 1! }             }         }          group {             name    "RS_objprop_switcher_5"             label   "Strands"              parm {                 name    "RS_objpro_label6"                 label   " "                 type    label                 default { "" }             }             parm {                 name    "RS_objprop_strands_enable"                 label   "Render Object as Strands"                 type    toggle                 default { "0" }             }             parm {                 name    "RS_objprop_strands_type"                 label   "Strand Type"                 type    ordinal                 default { "4" }                 disablewhen "{ RS_objprop_strands_enable == 0 }"                 menu {                     "RS_STRAND_SHAPE_BOX"       "Box"                     "RS_STRAND_SHAPE_CYLINDER"  "Cylinder"                     "RS_STRAND_SHAPE_CAPSULE"   "Capsule"                     "RS_STRAND_SHAPE_CONE"      "Cone"                     "RS_STRAND_SHAPE_STRIP"     "Strip"                 }             }             parm {                 name    "RS_objprop_strands_maxSubd"                 label   "Max. Tessellation Subdivisions"                 type    integer                 default { "8" }                 disablewhen "{ RS_objprop_strands_enable == 0 }"                 range   { 0! 16 }             }             parm {                 name    "RS_objprop_strands_scale"                 label   "Default Scale"                 type    float                 default { "0.01" }                 disablewhen "{ RS_objprop_strands_enable == 0 }"                 range   { 0! 2 }             }             parm {                 name    "RS_objprop_strands_scaleMult"                 label   "Global Scale Multiplier"                 type    float                 default { "1" }                 disablewhen "{ RS_objprop_strands_enable == 0 }"                 range   { 0! 10 }             }             parm {                 name    "RS_objprop_strands_ignorePScale"                 label   "Ignore the \'pscale\' Attribute"                 type    toggle                 default { "0" }                 disablewhen "{ RS_objprop_strands_enable == 0 }"             }             parm {                 name    "RS_objprop_strands_useCamera"                 label   "Screen-space Adaptive Tesselaltion"                 type    toggle                 default { "1" }                 disablewhen "{ RS_objprop_strands_enable == 0 }"             }         }          group {             name    "RS_objprop_switcher_6"             label   "Particles"              parm {                 name    "RS_objpro_label10"                 label   " "                 type    label                 default { "" }             }             parm {                 name    "RS_objprop_particles_enable"                 label   "Render Object as Particles"                 type    toggle                 default { "0" }             }             parm {                 name    "RS_objprop_particles_ignoreScale"                 label   "Ignore Scale Attributes"                 type    toggle                 default { "0" }                 disablewhen "{ RS_objprop_particles_enable == 0 }"             }             parm {                 name    "RS_objprop_particles_scale"                 label   "Default Scale"                 type    float                 default { "0.01" }                 disablewhen "{ RS_objprop_particles_enable == 0 } { RS_objprop_particles_ignoreScale == 0 }"                 range   { 0! 2 }             }             parm {                 name    "RS_objprop_particles_scaleMult"                 label   "Global Scale Multiplier"                 type    float                 default { "1" }                 disablewhen "{ RS_objprop_particles_enable == 0 }"                 range   { 0! 10 }             }         }          group {             name    "RS_objprop_switcher_7"             label   "Volume"              parm {                 name    "RS_objpro_label7"                 label   " "                 type    label                 default { "" }             }             parm {                 name    "RS_objprop_volume_enable"                 label   "Volume Enable"                 type    toggle                 invisible                 default { "0" }             }             parm {                 name    "RS_objprop_volume_type"                 label   "Volume Type"                 type    ordinal                 invisible                 default { "0" }                 menu {                     "vOpenVDB"          "OpenVDB File"                     "vHoudiniVolume"    "Volume/VDB Houdini Primitive"                 }             }             parm {                 name    "RS_objprop_volume_filterN"                 label   "Filter Negative Voxels"                 type    toggle                 default { "1" }             }             parm {                 name    "RS_objprop_volume_filterDeg"                 label   "Filter Degenerate Voxels"                 type    toggle                 default { "0" }             }             parm {                 name    "RS_objprop_volume_filterDegThr"                 label   "Degenerate Voxels Threshold"                 type    float                 default { "10" }                 disablewhen "{ RS_objprop_volume_filterDeg == 0 }"                 range   { 1! 100 }             }             parm {                 name    "RS_objprop_volume_cleanBackg"                 label   "Color Channels Clean Background"                 type    toggle                 default { "1" }             }             parm {                 name    "RS_objprop_volume_v"                 label   "Use Velocity Grids"                 type    toggle                 default { "0" }             }             parm {                 name    "RS_objprop_volume_vx"                 label   "Velocity X Grid"                 type    string                 default { "vel.x" }                 disablewhen "{ RS_objprop_volume_v == 0 }"             }             parm {                 name    "RS_objprop_volume_vy"                 label   "Velocity Y Grid"                 type    string                 default { "vel.y" }                 disablewhen "{ RS_objprop_volume_v == 0 }"             }             parm {                 name    "RS_objprop_volume_vz"                 label   "Velocity Z Grid"                 type    string                 default { "vel.z" }                 disablewhen "{ RS_objprop_volume_v == 0 }"             }             parm {                 name    "RS_objprop_volume_vs"                 label   "Velocity Grid Scale"                 type    float                 default { "1" }                 disablewhen "{ RS_objprop_volume_v == 0 }"                 range   { 0! 1 }             }             parm {                 name    "RS_objpro_last"                 label   "RS_objpro_last"                 type    integer                 invisible                 default { "0" }                 range   { 0 10 }             }         }      }      parm {         name    "objpath1"         label   "Get Object"         type    oppath         default { "" }         parmtag { "autoscope" "0000000000000000" }         parmtag { "opfilter" "!!SOP!!" }         parmtag { "oprelative" "." }     }     parm {         name    "xformtype"         label   "Transform"         type    ordinal         default { "object" }         menu {             "none"      "None"             "local"     "Into This Object"             "object"    "Into Specified Object"         }         parmtag { "autoscope" "0000000000000000" }         parmtag { "script_callback_language" "python" }     } ' $_obj_dy_get_obj
opparm $_obj_dy_get_obj  RS_objprop_proxy_overrideList ( 0 )
opset -S on $_obj_dy_get_obj
chautoscope $_obj_dy_get_obj +tx +ty +tz +rx +ry +rz +sx +sy +sz
opset -d on -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off -x off $_obj_dy_get_obj
opexprlanguage -s hscript $_obj_dy_get_obj
opuserdata -n '___Version___' -v '18.5.351' $_obj_dy_get_obj
opuserdata -n 'wirestyle' -v 'rounded' $_obj_dy_get_obj
opcf $_obj_dy_get_obj

# Node $_obj_dy_get_obj_get_ (Sop/object_merge)
set _obj_dy_get_obj_get_ = `run("opadd -e -n -v object_merge get_")`
oplocate -x `$arg2 + -3.0128572232761686` -y `$arg3 + -1.8313111584146897` $_obj_dy_get_obj_get_
opparm $_obj_dy_get_obj_get_  numobj ( 1 )
chblockbegin
chadd -t 0 0 $_obj_dy_get_obj_get_ xformtype
chkey -t 0 -v 2 -m 0 -a 0 -A 0 -T a  -F 'ch("../xformtype")' $_obj_dy_get_obj_get_/xformtype
chadd -t 0 0 $_obj_dy_get_obj_get_ objpath1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'chsop("../objpath1")' $_obj_dy_get_obj_get_/objpath1
chblockend
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_dy_get_obj_get_
opexprlanguage -s hscript $_obj_dy_get_obj_get_
opuserdata -n '___Version___' -v '18.5.351' $_obj_dy_get_obj_get_

# Node $_obj_dy_get_obj_OUT (Sop/null)
set _obj_dy_get_obj_OUT = `run("opadd -e -n -v null OUT")`
oplocate -x `$arg2 + -3.0116071946659391` -y `$arg3 + -8.2603911516499355` $_obj_dy_get_obj_OUT
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_dy_get_obj_OUT
opexprlanguage -s hscript $_obj_dy_get_obj_OUT
opuserdata -n '___Version___' -v '18.5.351' $_obj_dy_get_obj_OUT

# Node $_obj_dy_get_obj_output0 (Sop/output)
set _obj_dy_get_obj_output0 = `run("opadd -e -n -v output output0")`
oplocate -x `$arg2 + -3.0116071946659391` -y `$arg3 + -10.366594899091282` $_obj_dy_get_obj_output0
chblockbegin
chadd -t 0 0 $_obj_dy_get_obj_output0 outputidx
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'max(opdigits("."),0)' $_obj_dy_get_obj_output0/outputidx
chblockend
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_dy_get_obj_output0
opexprlanguage -s hscript $_obj_dy_get_obj_output0
opuserdata -n '___Version___' -v '18.5.351' $_obj_dy_get_obj_output0
oporder -e get_ OUT output0 
opcf ..
opset -p on $_obj_dy_get_obj

opcf $arg1
opcf $_obj_dy_get_obj
opwire -n $_obj_dy_get_obj_get_ -0 $_obj_dy_get_obj_OUT
opwire -n $_obj_dy_get_obj_OUT -0 $_obj_dy_get_obj_output0
opcf ..

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_dy_get_obj
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_dy_get_obj
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="shader_out" label="Shader Connect OUT" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import shader_connect as connect

connect.shader_out()]]></script>
  </tool>
</shelfDocument>
