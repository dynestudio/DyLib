<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="dyne" label="Dyne">
    <memberTool name="dy_shader_out"/>
    <memberTool name="dy_save_incremental"/>
    <memberTool name="dy_new_geo"/>
    <memberTool name="dy_obj_merge"/>
    <memberTool name="dy_change_color"/>
    <memberTool name="dy_default_color"/>
    <memberTool name="dy_rs_pbr_base"/>
    <memberTool name="dy RS Light Instances Attrs"/>
    <memberTool name="dy_rslight_instances_attrs"/>
  </toolshelf>

  <tool name="dy RS Light Instances Attrs" label="dy RS Light Instances Attrs" icon="SOP_attribwrangle">
    <toolMenuContext name="network">
      <contextOpType>Sop/object_merge</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Dyne/Redshift Utils</toolSubmenu>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if "outputnodename" in kwargs and "inputindex" in kwargs:
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if "inputnodename" in kwargs and "outputindex" in kwargs:
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if "autoplace" in kwargs:
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if "shiftclick" in kwargs and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if "nodepositionx" in kwargs and             "nodepositiony" in kwargs:
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if "node_bbox" in kwargs:
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if 'attribdelete' not in child_type:
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_get_points (Sop/object_merge)
set _obj_geo1_get_points = `run("opadd -e -n -v object_merge get_points")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_get_points
opparm $_obj_geo1_get_points  numobj ( 1 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_get_points
opexprlanguage -s hscript $_obj_geo1_get_points
opuserdata -n '___Version___' -v '18.5.351' $_obj_geo1_get_points
opset -p on $_obj_geo1_get_points
opcf $arg1

# Node $_obj_geo1_assign_RS_lights_attrs (Sop/attribwrangle)
set _obj_geo1_assign_RS_lights_attrs = `run("opadd -e -n -v attribwrangle assign_RS_lights_attrs")`
oplocate -x `$arg2 + 2.1052352975840294` -y `$arg3 + -4.7129411764705882` $_obj_geo1_assign_RS_lights_attrs
opparm $_obj_geo1_assign_RS_lights_attrs  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_geo1_assign_RS_lights_attrs snippet ( '//light_color (float 3)\n//light_temperature (float)\n//light_intensity (float)\n//The point orientation attributes, for example âNâ, can be used to align the directional lights.\n\nv@light_color = v@rand_v;\nf@light_intensity = fit01(f@rand_f, 0, 3);' )
opcolor -c 1 0.52899998426437378 0.62400001287460327 $_obj_geo1_assign_RS_lights_attrs
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_assign_RS_lights_attrs
opexprlanguage -s hscript $_obj_geo1_assign_RS_lights_attrs
opuserdata -n '___Version___' -v '' $_obj_geo1_assign_RS_lights_attrs
opset -p on $_obj_geo1_assign_RS_lights_attrs
opcf $arg1

# Node $_obj_geo1_rand_attrs_example (Sop/attribwrangle)
set _obj_geo1_rand_attrs_example = `run("opadd -e -n -v attribwrangle rand_attrs_example")`
oplocate -x `$arg2 + -0.0017499679233878851` -y `$arg3 + -2.5928411634529338` $_obj_geo1_rand_attrs_example
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector points "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }         parm {             name    "vex_precision"             baseparm             label   "VEX Precision"             export  none         }     }      parm {         name    "Seed"         label   "Seed"         type    float         default { "0" }         range   { 0 1 }     } ' $_obj_geo1_rand_attrs_example
opparm $_obj_geo1_rand_attrs_example  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_geo1_rand_attrs_example snippet ( 'f@rand_f = rand(@ptnum + chf("Seed"));\n\nfloat rand_r = rand(@rand_f + 123);\nfloat rand_g = rand(@rand_f + 456);\nfloat rand_b = rand(@rand_f + 789);\n\nv@rand_v = set(rand_r, rand_g, rand_b);' ) Seed ( 0.17499999999999999 )
opcolor -c 1 0.52899998426437378 0.62400001287460327 $_obj_geo1_rand_attrs_example
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_rand_attrs_example
opexprlanguage -s hscript $_obj_geo1_rand_attrs_example
opuserdata -n '___Version___' -v '' $_obj_geo1_rand_attrs_example
opset -p on $_obj_geo1_rand_attrs_example
opcf $arg1

# Node $_obj_geo1_OUT_points_2_RS_lights_instances (Sop/null)
set _obj_geo1_OUT_points_2_RS_lights_instances = `run("opadd -e -n -v null OUT_points_2_RS_lights_instances")`
oplocate -x `$arg2 + 2.1082352941176468` -y `$arg3 + -6.2188235294117646` $_obj_geo1_OUT_points_2_RS_lights_instances
opcolor -c 1 0.97600001096725464 0.66600000858306885 $_obj_geo1_OUT_points_2_RS_lights_instances
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_OUT_points_2_RS_lights_instances
opexprlanguage -s hscript $_obj_geo1_OUT_points_2_RS_lights_instances
opuserdata -n '___Version___' -v '18.5.351' $_obj_geo1_OUT_points_2_RS_lights_instances
opset -p on $_obj_geo1_OUT_points_2_RS_lights_instances
opcf $arg1

# Node $_obj_geo1_clean_attrs (Sop/attribdelete)
set _obj_geo1_clean_attrs = `run("opadd -e -n -v attribdelete clean_attrs")`
oplocate -x `$arg2 + -0.0021999664604663849` -y `$arg3 + -1.470588235294118` $_obj_geo1_clean_attrs
opparm $_obj_geo1_clean_attrs ptdel ( * ) vtxdel ( * ) primdel ( * ) dtldel ( * )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b on $_obj_geo1_clean_attrs
opexprlanguage -s hscript $_obj_geo1_clean_attrs
opuserdata -n '___Version___' -v '' $_obj_geo1_clean_attrs
opset -p on $_obj_geo1_clean_attrs

opcf $arg1
opcf $arg1
opwire -n $_obj_geo1_rand_attrs_example -0 $_obj_geo1_assign_RS_lights_attrs
opcf $arg1
opwire -n $_obj_geo1_clean_attrs -0 $_obj_geo1_rand_attrs_example
opcf $arg1
opwire -n $_obj_geo1_assign_RS_lights_attrs -0 $_obj_geo1_OUT_points_2_RS_lights_instances
opcf $arg1
opwire -n $_obj_geo1_get_points -0 $_obj_geo1_clean_attrs

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_OUT_points_2_RS_lights_instances
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_get_points
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="dy_save_incremental" label="Save Incremental" icon="hicon:/SVGIcons.index?MISC_python.svg">
    <script scriptType="python"><![CDATA[hou.hipFile.saveAndIncrementFileName()]]></script>
  </tool>

  <tool name="dy_new_geo" label="New Geometry" icon="OBJ_geo">
    <script scriptType="python"><![CDATA[import dylib_shelftools as dylib

dylib.new_geo()]]></script>
  </tool>

  <tool name="dy_shader_out" label="Shader Connect" icon="hicon:/SVGIcons.index?NETVIEW_material_flag.svg">
    <script scriptType="python"><![CDATA[import shader_connect

shader_connect.shader_out()]]></script>
  </tool>

  <tool name="dy_change_color" label="dy Change Node Color" icon="hicon:/SVGIcons.index?COP2_colorwheel.svg">
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
      <contextNetType>CHOP</contextNetType>
      <contextNetType>ROP</contextNetType>
      <contextNetType>SHOP</contextNetType>
      <contextNetType>COP2</contextNetType>
      <contextNetType>VOP</contextNetType>
      <contextNetType>VOPNET</contextNetType>
      <contextNetType>DOP</contextNetType>
      <contextNetType>TOP</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Dyne/</toolSubmenu>
    <script scriptType="python"><![CDATA[import dylib_shelftools as dylib

dylib.change_color()]]></script>
    <keywordList>
      <keyword>change color</keyword>
    </keywordList>
  </tool>

  <tool name="dy_default_color" label="dy Default Color" icon="hicon:/SVGIcons.index?COP2_colorwheel.svg">
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
      <contextNetType>CHOP</contextNetType>
      <contextNetType>ROP</contextNetType>
      <contextNetType>SHOP</contextNetType>
      <contextNetType>COP2</contextNetType>
      <contextNetType>VOP</contextNetType>
      <contextNetType>VOPNET</contextNetType>
      <contextNetType>DOP</contextNetType>
      <contextNetType>TOP</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Dyne/</toolSubmenu>
    <script scriptType="python"><![CDATA[import dylib_shelftools as dylib

dylib.default_color()]]></script>
    <keywordList>
      <keyword>default color</keyword>
    </keywordList>
  </tool>

  <tool name="dy_obj_merge" label="dy Object Merge" icon="SOP_object_merge">
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Dyne/</toolSubmenu>
    <script scriptType="python"><![CDATA[import dylib_shelftools as dylib

dylib.dy_obj_merge()]]></script>
    <keywordList>
      <keyword>obj merge</keyword>
    </keywordList>
  </tool>

  <tool name="dy_rs_pbr_base" label="dy RS PBR Base" icon="opdef:/Vop/rs_ogl_material?IconSVG">
    <toolMenuContext name="network">
      <contextNetType>VOP</contextNetType>
      <contextNetType>VOPNET</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Dyne/</toolSubmenu>
    <script scriptType="python"><![CDATA[import rs_pbr_base as rspbr

rspbr.main()]]></script>
    <keywordList>
      <keyword>PBR</keyword>
    </keywordList>
  </tool>

  <tool name="dy_rslight_instances_attrs" label="dy RS Light Instances Attrs 2" icon="SOP_attribwrangle">
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[]]></script>
  </tool>
</shelfDocument>
